{"version":3,"file":"static/js/783.597a7fec.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Brand/BrandPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Row, Select, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport ImgCrop from \"antd-img-crop\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    image:[],\n    country:\"\",\n};\n\n\n\n\nconst BrandPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n    // query-countries-get\n    const {data: countriesData, refetch: countriesFetch} = useQuery(\n        'get-countries',\n        () => apiService.getData('/cars/countries/'),\n        {\n            enabled: false,\n        },\n    );\n\n    // query-brands\n    const {\n        mutate: postBrandsMutate,\n        data: postBrands,\n        isLoading: postBrandsLoading,\n        isSuccess: postBrandsSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editBrandsLoading,\n        data: editBrandsData,\n        refetch: editBrandsRefetch,\n        isSuccess: editBrandsSuccess,\n    } = useQuery([\"edit-brands\", editId], () => apiService.getDataByID(\"/cars/brands\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putBrands,\n        isLoading: putBrandsLoading,\n        data: putData,\n        isSuccess: putBrandsSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // brands success\n    useEffect(() => {\n        if (putBrandsSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postBrandsSuccess || putBrandsSuccess) {\n\n            navigate('/brands')\n        }\n    }, [postBrands, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editBrandsRefetch();\n        }\n    }, [editId]);\n\n    // if no edit brands\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        countriesFetch()\n    }, []);\n\n\n    //edit brands\n    useEffect(() => {\n        if (editBrandsSuccess) {\n\n            console.log(editBrandsData.countries.id)\n\n            const image=[{\n                uid: editBrandsData.id,\n                name: editBrandsData.id,\n                status: \"done\",\n                url: editBrandsData.image\n            }];\n\n            const edit = {\n                title_uz: editBrandsData.title_uz,\n                title_ru: editBrandsData.title_ru,\n                image,\n                country: editBrandsData.countries.id,\n            }\n            setFileListProps(image)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editBrandsData])\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n        formData.append('country', values.country);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editBrandsData) {\n            putBrands({url: '/cars/brands', data: formData, id: editId})\n        } else {\n            postBrandsMutate({url: \"/cars/brands/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n    // option types\n    const optionsTypes = useMemo(() => {\n        return countriesData?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [countriesData]);\n\n    // image\n    const onChange = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n    return (\n        <div>\n            {(postBrandsLoading || editBrandsLoading || putBrandsLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Brand kiritishingiz kerak'}\n                                label={'Brand Uz'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Вы должны ввести бренд'}\n                                label={'Бренд Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                        <Col span={24}>\n                            <Form.Item\n                                label={'Выберите страну'}\n                                name={'country'}\n                                rules={[{\n                                    required: true, message: 'Страну должны быть выбраны'\n                                }]}\n                                wrapperCol={{\n                                    span: 24,\n                                }}\n                            >\n                                <Select\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну типы'\n                                    optionLabelProp='label'\n                                    options={optionsTypes}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение бренда'\n                                name={'image'}\n                                rules={[{required: true, message: 'Требуется изображение бренда'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListProps}\n                                        listType='picture-card'\n                                        onChange={onChange}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editBrandsSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default BrandPostEdit;"],"names":["_ref","label","name","required","required_text","_jsx","Form","Item","rules","message","children","Input","initialValueForm","title_uz","title_ru","image","country","BrandPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","data","countriesData","refetch","countriesFetch","useQuery","apiService","getData","enabled","mutate","postBrandsMutate","postBrands","isLoading","postBrandsLoading","isSuccess","postBrandsSuccess","useMutation","url","postData","onSuccess","success","onError","error","obj","response","concat","editBrandsLoading","editBrandsData","editBrandsRefetch","editBrandsSuccess","getDataByID","putBrands","putBrandsLoading","putData","putBrandsSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","console","log","countries","uid","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","optionsTypes","useMemo","map","option","value","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","Select","width","placeholder","optionLabelProp","options","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","marginTop"],"sourceRoot":""}