{"version":3,"file":"static/js/507.8a190b7b.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/News/NewsPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\nimport ImgCrop from \"antd-img-crop\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    sub_title_uz: \"\",\n    sub_title_ru: \"\",\n    text_uz: \"\",\n    text_ru: \"\",\n    image:[]\n};\n\n\n\n\nconst NewsPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n    // query-news\n    const {\n        mutate: postNewsMutate,\n        data: postNews,\n        isLoading: postNewsLoading,\n        isSuccess: postNewsSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editNewsLoading,\n        data: editNewsData,\n        refetch: editNewsRefetch,\n        isSuccess: editNewsSuccess,\n    } = useQuery([\"edit-news\", editId], () => apiService.getDataByID(\"/about/news\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putNews,\n        isLoading: putNewsLoading,\n        data: putData,\n        isSuccess: putNewsSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // news success\n    useEffect(() => {\n        if (putNewsSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postNewsSuccess || putNewsSuccess) {\n\n            navigate('/news')\n        }\n    }, [postNews, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editNewsRefetch();\n        }\n    }, [editId]);\n\n    // if no edit news\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit news\n    useEffect(() => {\n        if (editNewsSuccess) {\n\n            const image=[{\n                uid: editNewsData.id,\n                name: editNewsData.id,\n                status: \"done\",\n                url: editNewsData.image\n            }];\n\n\n            const edit = {\n                title_uz: editNewsData.title_uz,\n                title_ru: editNewsData.title_ru,\n                sub_title_uz: editNewsData.sub_title_uz,\n                sub_title_ru: editNewsData.sub_title_ru,\n                text_uz: editNewsData.text_uz,\n                text_ru: editNewsData.text_ru,\n                image\n            }\n\n            setFileListProps(image)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editNewsData])\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n        formData.append('sub_title_uz', values.sub_title_uz);\n        formData.append('sub_title_ru', values.sub_title_ru);\n        formData.append('text_uz', values.text_uz);\n        formData.append('text_ru', values.text_ru);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editNewsData) {\n            putNews({url: '/about/news', data: formData, id: editId})\n        } else {\n            postNewsMutate({url: \"/about/news/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChange = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n    return (\n        <div>\n            {(postNewsLoading || editNewsLoading || putNewsLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Sarlavha talab qilinadi'}\n                                label={'Sarlavha Uz'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Необходимо ввести заголовок'}\n                                label={'Заголовок Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n\n                    </Row>\n\n                    <Row gutter={20}>\n\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true}\n                                required_text={'Qo\\'shimcha sarlavha kiritish talab qilinada'}\n                                label={'Qo\\'shimcha sarlavha Uz'}\n                                name={'sub_title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true} required_text={'Требуется дополнительный заголовок'}\n                                label={'Дополнительное название Ru'}\n                                name={'sub_title_ru'}\n                            />\n\n                        </Col>\n                    </Row>\n\n\n\n                    <Row gutter={20}>\n\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true}\n                                required_text={'Asosiy matn kiritish kerak'}\n                                label={'Asosiy matn Uz'}\n                                name={'text_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true} required_text={'Вам необходимо ввести основной текст'}\n                                label={'Основной текст Ru'}\n                                name={'text_ru'}\n                            />\n\n                        </Col>\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение на заднем плане'\n                                name={'image'}\n                                rules={[{required: true, message: 'Требуется фоновое изображение.'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListProps}\n                                        listType='picture-card'\n                                        onChange={onChange}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editNewsSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default NewsPostEdit;"],"names":["_ref","label","name","required","required_text","_jsx","Form","Item","rules","message","children","Input","TextArea","rows","initialValueForm","title_uz","title_ru","sub_title_uz","sub_title_ru","text_uz","text_ru","image","NewsPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postNewsMutate","data","postNews","isLoading","postNewsLoading","isSuccess","postNewsSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editNewsLoading","editNewsData","refetch","editNewsRefetch","editNewsSuccess","useQuery","getDataByID","enabled","putNews","putNewsLoading","putData","putNewsSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormTextArea","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}