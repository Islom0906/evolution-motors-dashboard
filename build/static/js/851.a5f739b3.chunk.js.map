{"version":3,"file":"static/js/851.a5f739b3.chunk.js","mappings":"kLAIA,MAmBA,EAnBkBA,IAAkD,IAAjD,MAACC,EAAK,KAACC,EAAI,SAACC,EAAQ,cAACC,EAAa,QAACC,GAAQL,EAC1D,OACIM,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAOI,GAAUI,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACbJ,EAAAA,EAAAA,KAAA,KAAAI,SAAIT,KACJK,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,KAAAI,SAAIL,QACDC,EAAAA,EAAAA,KAAA,OAAAI,SAAMT,IACbC,KAAMA,EAENS,MAAO,CAAC,CACJR,SAAUA,EAAUS,QAASR,IAC9BM,UAEHJ,EAAAA,EAAAA,KAACO,EAAAA,QAAK,KACE,C,gFCfpB,MAeA,EAfwBb,IAA0C,IAAzC,MAACC,EAAK,KAACC,EAAI,SAACC,EAAQ,cAACC,GAAcJ,EACxD,OACIM,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAOA,EACPC,KAAMA,EAENS,MAAO,CAAC,CACJR,SAAUA,EAAUS,QAASR,IAC9BM,UAEHJ,EAAAA,EAAAA,KAACQ,EAAAA,EAAW,CAACC,MAAO,CAACC,MAAM,WACnB,C,gFCVpB,MAeA,EAfqBhB,IAA0C,IAAzC,MAACC,EAAK,KAACC,EAAI,SAACC,EAAQ,cAACC,GAAcJ,EACrD,OACIM,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAOA,EACPC,KAAMA,EAENS,MAAO,CAAC,CACJR,SAAUA,EAAUS,QAASR,IAC9BM,UAEHJ,EAAAA,EAAAA,KAACW,EAAAA,EAAQ,CAACC,KAAM,KACR,C,mSCRpB,MAAMC,EAAmB,CACrBC,SAAU,GACVC,SAAU,IA+Id,EA3IqBrB,IAAqB,IAApB,aAACsB,GAAatB,EAChC,MAAOuB,GAAQhB,EAAAA,EAAKiB,WAIbC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IAK3CC,OAAQC,EACRC,KAAMC,EACNC,UAAWC,EACXC,UAAWC,IACXC,EAAAA,EAAAA,cAAYC,IAAA,IAAC,IAACC,EAAG,KAAER,GAAKO,EAAA,OAAKE,EAAAA,EAAWC,SAASF,EAAKR,EAAK,GAAE,CAC7DW,UAAWA,KAEP7B,EAAAA,GAAQ8B,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BlB,EAAAA,GAAQgC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,IAUFG,EAAYC,IAGd,MAAMC,EAAW,IAAIC,SAErBD,EAASE,OAAO,WAAYH,EAAO7B,UACnC8B,EAASE,OAAO,WAAYH,EAAO5B,UAGnCQ,EAAgB,CAACS,IAAK,eAAgBR,KAAMoB,GAAU,GAyB1DG,EAAAA,EAAAA,YAAU,KACFlB,IACAb,IACAI,GAAe,GACfH,EAAK+B,eAAenC,GACxB,GACD,CAACY,IAOJ,OACItB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACC,KAAK,UAAUC,QAvDbC,KACdhC,GAAe,EAAK,EAsD0BhB,SAAC,kGAG3CJ,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CAACC,MAAM,oDAAYC,KAAMpC,EAAaqC,KAtCnCC,KACbxC,EACKyC,iBACAC,MAAMhB,IAEHD,EAASC,EAAO,IAOnBiB,OAAOC,IACJC,QAAQC,IAAI,UAAWF,EAAU,GACnC,EAwB0DG,SAtB/CC,KACjB7C,GAAe,EAAM,EAqBkEhB,SACzEuB,GACE3B,EAAAA,EAAAA,KAACkE,EAAAA,GAAS,KACVlE,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACDgB,KAAMA,EACNrB,KAAK,QACLuE,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,IAEV3D,MAAO,CACH6D,SAAU,QAEdC,cAAe1D,EACf6B,SAAUA,EACV8B,eA1BAX,IACpBC,QAAQC,IAAI,UAAWF,EAAU,EA0BbY,aAAa,MAAKrE,UAElBD,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EACZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,iCACfH,MAAO,cACPC,KAAM,gBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,8KACfH,MAAO,+EACPC,KAAM,wBAUhC,ECvIRiB,EAAmB,CACrBC,SAAU,GACVC,SAAU,IAmOd,EA/NsBrB,IAAyB,IAAxB,iBAACoF,GAAiBpF,EACrC,MAAOuB,GAAQhB,EAAAA,EAAKiB,WAIbC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxC0D,EAAeC,IAAoB3D,EAAAA,EAAAA,UAAS,KAG5CG,KAAMyD,IAAiBC,EAAAA,EAAAA,UAC1B,iBACA,IAAMjD,EAAAA,EAAWkD,QAAQ,uBAKzB7D,OAAQ8D,EACR5D,KAAM6D,EACN3D,UAAW4D,EACX1D,UAAW2D,IACXzD,EAAAA,EAAAA,cAAYC,IAAA,IAAC,IAACC,EAAG,KAAER,GAAKO,EAAA,OAAKE,EAAAA,EAAWC,SAASF,EAAKR,EAAK,GAAE,CAC7DW,UAAWA,KAEP7B,EAAAA,GAAQ8B,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BlB,EAAAA,GAAQgC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,IAUFG,EAAYC,IAAY,IAAD6C,EAGzB,MAAM5C,EAAW,IAAIC,SAErBD,EAASE,OAAO,WAAYH,EAAO7B,UACnC8B,EAASE,OAAO,WAAYH,EAAO5B,UACnC6B,EAASE,OAAO,UAAWH,EAAO8C,SAE9B7C,EAASE,OAAO,QAAyB,QAAlB0C,EAAET,EAAc,UAAE,IAAAS,OAAA,EAAhBA,EAAkBE,eAE3CN,EAAiB,CAACpD,IAAK,gBAAiBR,KAAMoB,GAAU,GAyBhEG,EAAAA,EAAAA,YAAU,KACFwC,IACAT,IACA1D,GAAe,GACfH,EAAK+B,eAAenC,GAExB,GACD,CAACwE,IAGJ,MAKMM,GAAeC,EAAAA,EAAAA,UAAQ,IACL,OAAbX,QAAa,IAAbA,OAAa,EAAbA,EAAeY,KAAKC,IAChB,CACHC,MAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,GACfrG,MAAa,OAANmG,QAAM,IAANA,OAAM,EAANA,EAAQ/E,cAGxB,CAACkE,IAyBJ,OACI9E,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACC,KAAK,UAAUC,QA3FbC,KACdhC,GAAe,EAAK,EA0F0BhB,SAAC,8GAG3CJ,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CAACC,MAAM,oDAAYC,KAAMpC,EAAaqC,KAxEnCC,KACbxC,EACKyC,iBACAC,MAAMhB,IAEHD,EAASC,EAAO,IAOnBiB,OAAOC,IACJC,QAAQC,IAAI,UAAWF,EAAU,GACnC,EA0D0DG,SAxD/CC,KACjB7C,GAAe,EAAM,EAuDkEhB,SACzEkF,GACEtF,EAAAA,EAAAA,KAACkE,EAAAA,GAAS,KACV/D,EAAAA,EAAAA,MAACF,EAAAA,EAAI,CACDgB,KAAMA,EACNrB,KAAK,QACLuE,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,IAEV3D,MAAO,CACH6D,SAAU,QAEdC,cAAe1D,EACf6B,SAAUA,EACV8B,eA3DAX,IACpBC,QAAQC,IAAI,UAAWF,EAAU,EA2DbY,aAAa,MAAKrE,SAAA,EAElBD,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EACZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,4BACfH,MAAO,WACPC,KAAM,gBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,wHACfH,MAAO,oCACPC,KAAM,gBAIdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,wFACPC,KAAM,UACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,kJAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHxF,MAAO,CACHC,MAAO,QAEXwF,YAAY,qGACZC,gBAAgB,QAChBC,QAAST,YAMzB3F,EAAAA,EAAAA,KAAC0E,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,UACZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAM,0GACNC,KAAM,QACNS,MAAO,CAAC,CAACR,UAAU,EAAMS,QAAS,mKAAiCF,UACnEJ,EAAAA,EAAAA,KAACqG,EAAAA,EAAO,CAACC,gBAAc,EAAAlG,UACnBJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAM,CACHC,SAAU,EACVC,SAAU1B,EACV2B,SAAS,eACTC,SArG3BC,IAA8B,IAA5BH,SAAUI,GAAYD,EACrC5B,EAAiB6B,GACjB5F,EAAK+B,eAAe,CAAC8D,MAAOD,GAAa,EAoGDE,UA/F1BC,UACd,IAAIC,EAAMC,EAAKlF,IACViF,IACDA,QAAY,IAAIE,SAASC,IACrB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,EAAKxB,eAC1B2B,EAAOG,OAAS,IAAMJ,EAAQC,EAAOI,OAAO,KAGpD,MAAMX,EAAQ,IAAIY,MAClBZ,EAAMG,IAAMA,EACZ,MAAMU,EAAYC,OAAOrE,KAAK0D,GACrB,OAATU,QAAS,IAATA,GAAAA,EAAWE,SAASC,MAAMhB,EAAMiB,UAAU,EAoFFC,aAAcA,KAAM,EAAM5H,SAEzB2E,EAAckD,OAAS,EAAI,GAAK,0BAUnE,GC7NR,MAACC,GAASC,EAAAA,QAEVtH,EAAmB,CACrBE,SAAU,GACVD,SAAU,GACVoC,KAAM,IAIJkF,EAA8B,CAChCrH,SAAU,GACVmC,KAAK,IAuTT,EApTwBxD,IAA6C,IAA5C,iBAACoF,EAAgB,SAACuD,EAAQ,WAACC,GAAW5I,EAC3D,MAAOuB,GAAQhB,EAAAA,EAAKiB,WAGbC,EAAaC,IAAkBC,EAAAA,EAAAA,WAAS,IACxCkH,EAAcC,IAAmBnH,EAAAA,EAAAA,WAAS,IAC1CoH,EAAcC,IAAmBrH,EAAAA,EAAAA,WAAS,IAM7CC,OAAQ8D,EACR5D,KAAM6D,EACN3D,UAAW4D,EACX1D,UAAW2D,IACXzD,EAAAA,EAAAA,cAAYC,IAAA,IAAC,IAACC,EAAG,KAAER,GAAKO,EAAA,OAAKE,EAAAA,EAAWC,SAASF,EAAKR,EAAK,GAAE,CAC7DW,UAAWA,KAEP7B,EAAAA,GAAQ8B,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BlB,EAAAA,GAAQgC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,KAKJjB,OAAQqH,EACRjH,UAAWkH,EACXpH,KAAMqH,EACNjH,UAAWkH,IACXhH,EAAAA,EAAAA,cAAY8E,IAAA,IAAC,IACI5E,EAAG,KACHR,EAAI,GACJwE,GACHY,EAAA,OAAK3E,EAAAA,EAAW8G,SAAS/G,EAAKR,EAAMwE,EAAG,GAAE,CACvD7D,UAAWA,KACP7B,EAAAA,GAAQ8B,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BlB,EAAAA,GAAQgC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,IAUFG,EAAYC,IACd,MAAMqG,EAAYV,EAAWW,MAAKxD,IAAgB,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASO,MAAKrD,EAAO5B,WAC1DS,EAAK,CACPT,SAASiI,EAAYjI,SACrBD,SAASkI,EAAYlI,SACrBoC,KAAKP,EAAOO,MAEZqF,EACJnD,EAAiB,CAACpD,IAAK,mBAAoBR,KAAMmB,IAE7CgG,EAAa,CAAC3G,IAAK,kBAAmBR,OAAMwE,GAAIrD,EAAO5B,UAC3D,EAGEmI,EAAeC,IACjBX,EAAgBW,GAChBT,GAAgB,EAAK,GAmBzB3F,EAAAA,EAAAA,YAAU,MACFwC,GAAmBuD,KACnBhE,IACA1D,GAAe,GACfH,EAAK+B,eAAenC,GAExB,GACD,CAACwE,EAAWwD,IAGf,MAAMrE,EAAkBX,IACpBC,QAAQC,IAAI,UAAWF,EAAU,EAc/B8B,GAAeC,EAAAA,EAAAA,UAAQ,IACV,OAARyC,QAAQ,IAARA,OAAQ,EAARA,EAAUxC,KAAKC,IACX,CACHC,MAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,GACfrG,MAAa,OAANmG,QAAM,IAANA,OAAM,EAANA,EAAQ/E,cAGxB,CAACsH,IAGEe,GAAmBxD,EAAAA,EAAAA,UAAQ,IACZ,OAAV0C,QAAU,IAAVA,OAAU,EAAVA,EAAYzC,KAAKC,IACb,CACHC,MAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,GACfrG,MAAa,OAANmG,QAAM,IAANA,OAAM,EAANA,EAAQ/E,cAGxB,CAACuH,IAGJ,OACInI,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACC,KAAK,UAAUC,QAxFbC,KACdhC,GAAe,EAAK,EAuF0BhB,SAAC,oHAG3CJ,EAAAA,EAAAA,KAACqD,EAAAA,EAAK,CAACC,MAAM,oDAAYC,KAAMpC,EAAaqC,KAlEnCC,KACbxC,EACKyC,iBACAC,MAAMhB,IACHD,EAASC,EAAO,IAGnBiB,OAAOC,IACJC,QAAQC,IAAI,UAAWF,EAAU,GACnC,EAyD0DG,SAvD/CC,KACjB7C,GAAe,GACfsH,GAAgB,EAAM,EAqDkEhI,MAAO,IAAIN,SAEtFqI,EAiBInD,GAAmBsD,GAChB5I,EAAAA,EAAAA,KAACkE,EAAAA,GAAS,IAEVqE,GACIvI,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACDgB,KAAMA,EACNrB,KAAK,QACLuE,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,IAEV3D,MAAO,CACH6D,SAAU,QAEdC,cAAe1D,EACf6B,SAAUA,EACV8B,eAAgBA,EAChBC,aAAa,MAAKrE,UAElBD,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EACZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sCACfH,MAAO,mBACPC,KAAM,gBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,0LACfH,MAAO,2FACPC,KAAM,gBAIdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,4EACPC,KAAM,OACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,sIAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHoD,KAAM,WACN5I,MAAO,CACHC,MAAO,QAEXwF,YAAY,qGACZC,gBAAgB,QAChBC,QAAST,cAO7B3F,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CACDgB,KAAMA,EACNrB,KAAK,QACLuE,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,IAEV3D,MAAO,CACH6D,SAAU,QAEdC,cAAe6D,EACf1F,SAAUA,EACV8B,eAAgBA,EAChBC,aAAa,MAAKrE,UAElBD,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,wFACPC,KAAM,WACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,kJAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHxF,MAAO,CACHC,MAAO,QAEXwF,YAAY,qGACZC,gBAAgB,QAChBQ,SA7J1BZ,IAClB,MAAMuD,EAAO,GACOhB,EAAWW,MAAKxD,IAAgB,OAAPA,QAAO,IAAPA,OAAO,EAAPA,EAASO,MAAKD,IAC7CwD,MAAM1D,KAAI3C,IACpBoG,EAAOE,KAAKtG,EAAK8C,GAAG,IAExB/E,EAAK+B,eAAe,CAACE,KAAKoG,GAAQ,EAwJUlD,QAASgD,SAKrBpJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,4EACPC,KAAM,OACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,sIAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHoD,KAAM,WACN5I,MAAO,CACHC,MAAO,QAEXwF,YAAY,qGACZC,gBAAgB,QAChBC,QAAST,cA9IrCxF,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAAAtE,SAAA,EACAJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACkI,EAAK,CAACuB,MAAO,EAAErJ,SAAC,kWAErBJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACC,KAAK,UAAUC,QAASA,IAAM+F,GAAY,GAAM9I,SAAC,4HAI7DJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACC,KAAK,UAAUC,QAASA,IAAM+F,GAAY,GAAO9I,SAAC,oLAiJ5E,GC7SP8H,MAAK,GAAIC,EAAAA,QAGVtH,EAAmB,CACrBC,SAAU,GACVC,SAAU,GACV2I,aAAc,GACdC,aAAc,GACdC,MAAO,GACPC,aAAc,GACdC,OAAQ,GACRC,aAAc,KACdC,cAAe,GACfC,UAAW,GACXC,aAAc,GACdC,iBAAkB,GAClBC,aAAc,GACdC,cAAe,GACfC,cAAe,GACfpH,KAAM,KACNuC,QAAS,KACT8E,MAAO,KACPC,WAAY,KACZC,YAAa,KACbC,gBAAiB,GACjBC,gBAAiB,GACjBC,kBAAmB,GACnBC,eAAgB,CACZ,CACI/J,SAAU,GACVC,SAAU,GACV+J,sBAAuB,CACnB,CACIC,OAAQ,GACRC,OAAQ,GACRC,SAAU,GACVC,SAAU,QA6lC9B,EArlCoBC,KAEhB,MAAOlK,GAAQhB,EAAAA,EAAKiB,UACdkK,GAAWC,EAAAA,EAAAA,OACX,OAACC,IAAUC,EAAAA,EAAAA,KAAYC,GAASA,EAAMzC,WACtC0C,GAAWC,EAAAA,EAAAA,OAGVC,EAAmBC,IAAwBvK,EAAAA,EAAAA,UAAS,KACpDwK,EAAoBC,IAAyBzK,EAAAA,EAAAA,UAAS,KACtD0K,EAAuBC,IAA4B3K,EAAAA,EAAAA,UAAS,KAC5D4K,EAAuBC,IAA4B7K,EAAAA,EAAAA,UAAS,KAC5D8K,EAAyBC,IAA8B/K,EAAAA,EAAAA,UAAS,KAEhEgL,EAAUC,IAAejL,EAAAA,EAAAA,UAAS,KAClCkL,EAAgBC,IAAqBnL,EAAAA,EAAAA,UAAS,CACjDiI,OAAO,GACPmD,YAAY,MAKTjL,KAAMkL,EAAUC,QAAQ3L,IAAgBkE,EAAAA,EAAAA,UAC3C,aACA,IAAMjD,EAAAA,EAAWkD,QAAQ,mBAItB3D,KAAMyD,EAAc0H,QAAQ7H,IAAoBI,EAAAA,EAAAA,UACnD,iBACA,IAAMjD,EAAAA,EAAWkD,QAAQ,uBAOzB7D,OAAQsL,EACRpL,KAAMqL,EACNnL,UAAWoL,EACXlL,UAAWmL,IACXjL,EAAAA,EAAAA,cAAYpC,IAAA,IAAC,IAACsC,EAAG,SAAEY,GAASlD,EAAA,OAAKuC,EAAAA,EAAWC,SAASF,EAAKY,EAAS,GAAE,CAErET,UAAWA,KAEP7B,EAAAA,GAAQ8B,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BlB,EAAAA,GAAQgC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,KAOJjB,OAAQ0L,EAAexL,KAAMyL,EAASvL,UAAWwL,EAAgBtL,UAAWuL,KAE5ErL,EAAAA,EAAAA,cAAYC,IAAA,IAAC,IAACC,EAAG,KAAER,GAAKO,EAAA,OAAKE,EAAAA,EAAWC,SAASF,EAAKR,EAAK,GAAE,CAC7DW,UAAWA,KAEP7B,EAAAA,GAAQ8B,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BlB,EAAAA,GAAQgC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,KAMJb,UAAW0L,GACX5L,KAAM6L,GACNV,QAASW,GACT1L,UAAW2L,KAEXrI,EAAAA,EAAAA,UAAS,CAAC,WAAYoG,IAAS,IAAMrJ,EAAAA,EAAWuL,YAAY,aAAclC,IAAS,CACnFmC,SAAS,KAITnM,OAAQoM,GAAQhM,UAAWiM,GAAenM,KAAMqH,GAASjH,UAAWgM,KACpE9L,EAAAA,EAAAA,cAAY8E,IAAA,IAAC,IACI5E,EAAG,KAAER,EAAI,GAAEwE,GACdY,EAAA,OAAK3E,EAAAA,EAAW8G,SAAS/G,EAAKR,EAAMwE,EAAG,GAAE,CACvD7D,UAAWA,KAEP7B,EAAAA,GAAQ8B,QAAQ,UAAU,EAE9BC,QAAUC,IACN,IAAK,IAAIC,KAAOD,EAAME,SAAShB,KAC3BlB,EAAAA,GAAQgC,MAAM,GAADG,OAAIF,EAAG,MAAAE,OAAKH,EAAME,SAAShB,KAAKe,GAAK,IACtD,KAMDjB,OAAQuM,KAAsB/L,EAAAA,EAAAA,cAAYgM,IAAA,IAAC,IAAC9L,EAAG,IAAE+L,GAAID,EAAA,OAAK7L,EAAAA,EAAW+L,aAAahM,EAAK+L,EAAI,GAAE,CAChG5L,UAAWA,IAAM7B,EAAAA,GAAQ8B,QAAQ,WAAYC,QAAUC,GAAUhC,EAAAA,GAAQgC,MAAMA,EAAMhC,YAMzFyC,EAAAA,EAAAA,YAAU,KACF6K,IACAnC,EAAS,CAACvI,KAAM+K,EAAAA,GAAWC,QAAS,MAEpCf,IAAkBS,KAClBxC,EAAS,OACb,GACD,CAAC6B,EAASpE,MAGb9F,EAAAA,EAAAA,YAAU,KACS,KAAXuI,GACAgC,IACJ,GACD,CAAChC,KAGJvI,EAAAA,EAAAA,YAAU,KACS,KAAXuI,GACArK,EAAK+B,eAAenC,EACxB,GAED,KAIHkC,EAAAA,EAAAA,YAAU,KAAO,IAADoL,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACZ,MAAM9D,EAAkB,GAClBC,EAAkB,GAClBC,EAAoB,QAGR6D,IAAdpB,KACAA,GAAY3C,gBAAgB7E,KAAIiB,IAC5B,MAAMtF,EAAK,CACPkN,IAAK5H,EAAMd,GACXpG,KAAMkH,EAAMd,GACZ2I,OAAQ,OACR3M,IAAK8E,EAAMA,OAEf4D,EAAgBlB,KAAKhI,EAAK,IAE9B6L,GAAY1C,gBAAgB9E,KAAIiB,IAC5B,MAAMtF,EAAK,CACPkN,IAAK5H,EAAMd,GACXpG,KAAMkH,EAAMd,GACZ2I,OAAQ,OACR3M,IAAK8E,EAAMA,OAEf6D,EAAgBnB,KAAKhI,EAAK,IAE9B6L,GAAYzC,kBAAkB/E,KAAIiB,IAC9B,MAAMtF,EAAK,CACPkN,IAAK5H,EAAMd,GACXpG,KAAMkH,EAAMd,GACZ2I,OAAQ,OACR3M,IAAK8E,EAAMA,OAEf8D,EAAkBpB,KAAKhI,EAAK,KAWpC,MAAMgJ,EAAa,CAAC,CAChBkE,IAAgB,OAAXrB,SAAW,IAAXA,IAAuB,QAAZc,EAAXd,GAAa7C,kBAAU,IAAA2D,OAAZ,EAAXA,EAAyBnI,GAC9BpG,KAAiB,OAAXyN,SAAW,IAAXA,IAAuB,QAAZe,EAAXf,GAAa7C,kBAAU,IAAA4D,OAAZ,EAAXA,EAAyBpI,GAC/B2I,OAAQ,OACR3M,IAAgB,OAAXqL,SAAW,IAAXA,IAAuB,QAAZgB,EAAXhB,GAAa7C,kBAAU,IAAA6D,OAAZ,EAAXA,EAAyBvH,QAE5B2D,EAAc,CAAC,CACjBiE,IAAgB,OAAXrB,SAAW,IAAXA,IAAwB,QAAbiB,EAAXjB,GAAa5C,mBAAW,IAAA6D,OAAb,EAAXA,EAA0BtI,GAC/BpG,KAAiB,OAAXyN,SAAW,IAAXA,IAAwB,QAAbkB,EAAXlB,GAAa5C,mBAAW,IAAA8D,OAAb,EAAXA,EAA0BvI,GAChC2I,OAAQ,OACR3M,IAAgB,OAAXqL,SAAW,IAAXA,IAAwB,QAAbmB,EAAXnB,GAAa5C,mBAAW,IAAA+D,OAAb,EAAXA,EAA0B1H,QAGnC,GAAIyG,GAAgB,CAAC,IAADqB,EAAAC,EAAAC,EAEhB,MAAMC,EAAO,CACTjO,SAAqB,OAAXuM,SAAW,IAAXA,QAAW,EAAXA,GAAavM,SACvBC,SAAqB,OAAXsM,SAAW,IAAXA,QAAW,EAAXA,GAAatM,SACvB2I,aAAyB,OAAX2D,SAAW,IAAXA,QAAW,EAAXA,GAAa3D,aAC3BC,aAAyB,OAAX0D,SAAW,IAAXA,QAAW,EAAXA,GAAa1D,aAC3BC,MAAkB,OAAXyD,SAAW,IAAXA,QAAW,EAAXA,GAAazD,MACpBC,aAAyB,OAAXwD,SAAW,IAAXA,QAAW,EAAXA,GAAaxD,aAC3BC,OAAmB,OAAXuD,SAAW,IAAXA,QAAW,EAAXA,GAAa2B,MAAMA,MAC3BjF,aAAyB,OAAXsD,SAAW,IAAXA,QAAW,EAAXA,GAAatD,aAC3BC,cAA0B,OAAXqD,SAAW,IAAXA,QAAW,EAAXA,GAAarD,cAC5BC,UAAsB,OAAXoD,SAAW,IAAXA,QAAW,EAAXA,GAAapD,UACxBE,iBAA6B,OAAXkD,SAAW,IAAXA,QAAW,EAAXA,GAAalD,iBAC/BD,aAAyB,OAAXmD,SAAW,IAAXA,QAAW,EAAXA,GAAanD,aAC3BE,aAAyB,OAAXiD,SAAW,IAAXA,QAAW,EAAXA,GAAajD,aAC3BC,cAA0B,OAAXgD,SAAW,IAAXA,IAAoB,QAATuB,EAAXvB,GAAa4B,eAAO,IAAAL,OAAT,EAAXA,EAAsBM,OACrC5E,cAA0B,OAAX+C,SAAW,IAAXA,IAAoB,QAATwB,EAAXxB,GAAa4B,eAAO,IAAAJ,OAAT,EAAXA,EAAsBM,OACrCjM,KAAiB,OAAXmK,SAAW,IAAXA,QAAW,EAAXA,GAAanK,KACnBuC,QAAoB,OAAX4H,SAAW,IAAXA,QAAW,EAAXA,GAAa5H,QACtB8E,MAAkB,OAAX8C,SAAW,IAAXA,IAAkB,QAAPyB,EAAXzB,GAAa9C,aAAK,IAAAuE,OAAP,EAAXA,EAAoB9I,GAC3BwE,aACAC,cACAC,kBACAC,kBACAC,oBACAC,eAA0B,OAAXwC,SAAW,IAAXA,QAAW,EAAXA,GAAaxC,gBAGhC2B,EAAkB,CACdlD,OAAO+D,GAAYnK,KACnBuJ,YAAYY,GAAY5H,UAE5BmG,EAAqBpB,GACrBsB,EAAsBrB,GACtBuB,EAAyBtB,GACzBwB,EAAyBvB,GACzByB,EAA2BxB,GAC3B3J,EAAK+B,eAAe+L,EACxB,IAED,CAAC1B,MA6DJtK,EAAAA,EAAAA,YAAU,KACN,MAAMqM,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,iBACjDJ,IACAA,EAAaK,OAAS,GACtBxO,EAAK+B,eAAeoM,IAGxB,MAAMM,EAAqBA,KAEvBH,aAAaI,QAAQ,eAAgBN,KAAKO,UAAU3O,EAAK4O,kBAAmB,EAKhF,OAFAjI,OAAOkI,iBAAiB,eAAgBJ,GAEjC,KACHH,aAAaQ,WAAW,cACxBR,aAAaQ,WAAW,gBACxBnI,OAAOoI,oBAAoB,eAAgBN,EAAmB,CACjE,GACF,KAKH3M,EAAAA,EAAAA,YAAU,KAEN,GAAIgK,GAAoC,SAAbV,EAAqB,CAAC,IAAD4D,EAAAC,EAAAC,EAC5C,MAAMC,EAAY,CAAC,CACf1B,IAAiB,OAAZ7B,QAAY,IAAZA,GAAuB,QAAXoD,EAAZpD,EAAc4C,OAAO,UAAE,IAAAQ,OAAX,EAAZA,EAAyBjK,GAC9BpG,KAAkB,OAAZiN,QAAY,IAAZA,GAAuB,QAAXqD,EAAZrD,EAAc4C,OAAO,UAAE,IAAAS,OAAX,EAAZA,EAAyBlK,GAC/B2I,OAAQ,OACR3M,IAAiB,OAAZ6K,QAAY,IAAZA,GAAuB,QAAXsD,EAAZtD,EAAc4C,OAAO,UAAE,IAAAU,OAAX,EAAZA,EAAyBnO,MAGlCf,EAAK+B,eAAe,CAACwH,WAAY4F,IACjCxE,EAAqBwE,GACrB9D,EAAY,GAChB,CAEA,GAAIS,GAAoC,UAAbV,EAAsB,CAAC,IAADgE,EAAAC,EAAAC,EAE7C,MAAMH,EAAY,CAAC,CACf1B,IAAiB,OAAZ7B,QAAY,IAAZA,GAAuB,QAAXwD,EAAZxD,EAAc4C,OAAO,UAAE,IAAAY,OAAX,EAAZA,EAAyBrK,GAC9BpG,KAAkB,OAAZiN,QAAY,IAAZA,GAAuB,QAAXyD,EAAZzD,EAAc4C,OAAO,UAAE,IAAAa,OAAX,EAAZA,EAAyBtK,GAC/B2I,OAAQ,OACR3M,IAAiB,OAAZ6K,QAAY,IAAZA,GAAuB,QAAX0D,EAAZ1D,EAAc4C,OAAO,UAAE,IAAAc,OAAX,EAAZA,EAAyBvO,MAGlCf,EAAK+B,eAAe,CAACyH,YAAa2F,IAClCtE,EAAsBsE,GACtB9D,EAAY,GAChB,CAGA,GAAIS,GAAoC,aAAbV,EAAyB,CAAC,IAADmE,EAAAC,EAAAC,EAChD,MAAMC,EAAa,IAAI5E,GACjBqE,EAAY,CACd1B,IAAiB,OAAZ7B,QAAY,IAAZA,GAAuB,QAAX2D,EAAZ3D,EAAc4C,OAAO,UAAE,IAAAe,OAAX,EAAZA,EAAyBxK,GAC9BpG,KAAkB,OAAZiN,QAAY,IAAZA,GAAuB,QAAX4D,EAAZ5D,EAAc4C,OAAO,UAAE,IAAAgB,OAAX,EAAZA,EAAyBzK,GAC/B2I,OAAQ,OACR3M,IAAiB,OAAZ6K,QAAY,IAAZA,GAAuB,QAAX6D,EAAZ7D,EAAc4C,OAAO,UAAE,IAAAiB,OAAX,EAAZA,EAAyB1O,KAElC2O,EAAanH,KAAK4G,GAClBnP,EAAK+B,eAAe,CAAC0H,gBAAiB,CAAC0F,KAEvCpE,EAAyB2E,GACzBrE,EAAY,GAChB,CAEA,GAAIS,GAAoC,aAAbV,EAAyB,CAAC,IAADuE,EAAAC,EAAAC,EAChD,MAAMH,EAAa,IAAI1E,GACjBmE,EAAY,CACd1B,IAAiB,OAAZ7B,QAAY,IAAZA,GAAuB,QAAX+D,EAAZ/D,EAAc4C,OAAO,UAAE,IAAAmB,OAAX,EAAZA,EAAyB5K,GAC9BpG,KAAkB,OAAZiN,QAAY,IAAZA,GAAuB,QAAXgE,EAAZhE,EAAc4C,OAAO,UAAE,IAAAoB,OAAX,EAAZA,EAAyB7K,GAC/B2I,OAAQ,OACR3M,IAAiB,OAAZ6K,QAAY,IAAZA,GAAuB,QAAXiE,EAAZjE,EAAc4C,OAAO,UAAE,IAAAqB,OAAX,EAAZA,EAAyB9O,KAElC2O,EAAanH,KAAK4G,GAClBnP,EAAK+B,eAAe,CAAC2H,gBAAiB,CAACyF,KACvClE,EAAyByE,GACzBrE,EAAY,GAChB,CAEA,GAAIS,GAAoC,eAAbV,EAA2B,CAAC,IAAD0E,EAAAC,EAAAC,EAClD,MAAMN,EAAa,IAAIxE,GACjBiE,EAAY,CACd1B,IAAiB,OAAZ7B,QAAY,IAAZA,GAAuB,QAAXkE,EAAZlE,EAAc4C,OAAO,UAAE,IAAAsB,OAAX,EAAZA,EAAyB/K,GAC9BpG,KAAkB,OAAZiN,QAAY,IAAZA,GAAuB,QAAXmE,EAAZnE,EAAc4C,OAAO,UAAE,IAAAuB,OAAX,EAAZA,EAAyBhL,GAC/B2I,OAAQ,OACR3M,IAAiB,OAAZ6K,QAAY,IAAZA,GAAuB,QAAXoE,EAAZpE,EAAc4C,OAAO,UAAE,IAAAwB,OAAX,EAAZA,EAAyBjP,KAElC2O,EAAanH,KAAK4G,GAClBnP,EAAK+B,eAAe,CAAC4H,kBAAmB,CAACwF,KACzChE,EAA2BuE,GAC3BrE,EAAY,GAChB,IAED,CAACO,IAqBJ/I,QAAQC,IAAIkI,GACZ,MAqHMlF,GAAYC,UACd,IAAIC,EAAMC,EAAKlF,IACViF,IACDA,QAAY,IAAIE,SAASC,IACrB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcL,EAAKxB,eAC1B2B,EAAOG,OAAS,IAAMJ,EAAQC,EAAOI,OAAO,KAGpD,MAAMX,EAAQ,IAAIY,MAClBZ,EAAMG,IAAMA,EACZ,MAAMU,EAAYC,OAAOrE,KAAK0D,GACrB,OAATU,QAAS,IAATA,GAAAA,EAAWE,SAASC,MAAMhB,EAAMiB,UAAU,EAIxCmJ,IAAkBtL,EAAAA,EAAAA,UAAQ,IAErB,CACH,CACIG,OAAO,EACPpG,MAAO,qDAEX,CACIoG,OAAO,EACPpG,MAAO,0EAGhB,IAGGgG,IAAeC,EAAAA,EAAAA,UAAQ,IACT,OAAT8G,QAAS,IAATA,OAAS,EAATA,EAAW7G,KAAKC,IACZ,CACHC,MAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,GACfrG,MAAa,OAANmG,QAAM,IAANA,OAAM,EAANA,EAAQ/E,cAGxB,CAAC2L,IAGEtD,IAAmBxD,EAAAA,EAAAA,UAAQ,KAAO,IAADuL,EACnC,IAAK5E,EAAejD,OAChB,MAAO,GAEX,MAAM8H,EAAoB,OAAT1E,QAAS,IAATA,OAAS,EAATA,EAAWzD,MAAK/F,GAAMA,EAAK8C,KAAKuG,EAAejD,SAChE,OAAiB,OAAV8H,QAAU,IAAVA,GAAqB,QAAXD,EAAVC,EAAYC,iBAAS,IAAAF,OAAX,EAAVA,EAAuBtL,KAAKC,IACxB,CACHC,MAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,GACfrG,MAAa,OAANmG,QAAM,IAANA,OAAM,EAANA,EAAQ/E,YAErB,GACH,CAACwL,EAAejD,OAAOoD,IAEpB4E,IAAe1L,EAAAA,EAAAA,UAAQ,KAAO,IAAD2L,EAC/B,IAAKhF,EAAeE,YAChB,MAAO,GAEX,MAAM+E,EAA2B,OAAbvM,QAAa,IAAbA,OAAa,EAAbA,EAAegE,MAAKxD,GAASA,EAAQO,KAAKuG,EAAeE,cAC7E,OAAoB,OAAb+E,QAAa,IAAbA,GAAqB,QAARD,EAAbC,EAAeC,cAAM,IAAAF,OAAR,EAAbA,EAAuB1L,KAAKC,IACxB,CACHC,MAAa,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQE,GACfrG,MAAa,OAANmG,QAAM,IAANA,OAAM,EAANA,EAAQ/E,YAErB,GACH,CAACwL,EAAeE,YAAYxH,IAiB/B,OAAQjF,EAAAA,EAAAA,KAAA,OAAAI,SACF8M,GAAkBE,IAAkBO,IAAiBb,GAAuB9M,EAAAA,EAAAA,KAACkE,EAAAA,GAAS,KACpF/D,EAAAA,EAAAA,MAACF,EAAAA,EAAI,CACDgB,KAAMA,EACNrB,KAAK,QACLuE,SAAU,CACNC,KAAM,IAEVC,WAAY,CACRD,KAAM,IAEV3D,MAAO,CACH6D,SAAU,QAEdC,cAAe1D,EACf6B,SAzYMC,IAAY,IAAD+O,EAAAC,EAGzB,MAAMjH,EAAkB,GAClBC,EAAkB,GAClBC,EAAoB,GAE1BmB,EAAsBlG,KAAIiB,IACtB4D,EAAgBlB,KAAK1C,EAAM4H,IAAI,IAEnCzC,EAAsBpG,KAAIiB,IACtB6D,EAAgBnB,KAAK1C,EAAM4H,IAAI,IAEnCvC,EAAwBtG,KAAIiB,IACxB8D,EAAkBpB,KAAK1C,EAAM4H,IAAI,IAOrC,MAAMlN,EAAO,CACTV,SAAU6B,EAAO7B,SACjBC,SAAU4B,EAAO5B,SACjB2I,aAAc/G,EAAO+G,aACrBC,aAAchH,EAAOgH,aACrBC,MAAOjH,EAAOiH,MACdC,aAAoC,KAAtBlH,EAAOkH,aAAoB,KAAOlH,EAAOkH,aACvDC,OAAQnH,EAAOmH,OACfC,aAAcpH,EAAOoH,aACrBC,cAAerH,EAAOqH,cACtBC,UAAWtH,EAAOsH,UAClBC,aAAcvH,EAAOuH,aACrBC,iBAAkBxH,EAAOwH,iBACzBC,aAAczH,EAAOyH,aACrBC,cAAe1H,EAAO0H,cACtBC,cAAe3H,EAAO2H,cACtBpH,KAAMP,EAAOO,KACbuC,QAAS9C,EAAO8C,QAChB8E,MAAO5H,EAAO4H,MACdC,WAAgC,QAAtBkH,EAAE/F,EAAkB,UAAE,IAAA+F,OAAA,EAApBA,EAAsBhD,IAClCjE,YAAkC,QAAvBkH,EAAE9F,EAAmB,UAAE,IAAA8F,OAAA,EAArBA,EAAuBjD,IACpChE,kBACAC,kBACAC,oBACAC,eAAsB,OAANlI,QAAM,IAANA,OAAM,EAANA,EAAQkI,gBAExB0C,GACAG,GAAO,CAAC1L,IAAK,aAAcR,OAAMwE,GAAIsF,IAErC0B,EAAc,CAAChL,IAAK,cAAeR,QACvC,EAuVQgD,eArVYX,IACpBC,QAAQC,IAAI,UAAWF,EAAU,EAqVzBY,aAAa,MAAKrE,SAAA,EAElBD,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EACZD,EAAAA,EAAAA,MAACyE,EAAAA,EAAG,CAACR,KAAM,GAAGhE,SAAA,EACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,4EACPC,KAAM,OACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,sIAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHxF,MAAO,CACHC,MAAO,QAEXiG,SAhDRZ,IAChB,MAAMvE,EAAK,IAAI+K,EAAejD,OAAOvD,GACrCyG,EAAkBhL,GAClBP,EAAK+B,eAAe,CAACyC,QAAQ,KAAK8E,MAAM,MAAM,EA8CtBrE,YAAY,qGACZC,gBAAgB,QAChBC,QAAST,QAIjB3F,EAAAA,EAAAA,KAAC4R,EAAY,CAAC5Q,aAAcA,QAEhCb,EAAAA,EAAAA,MAACyE,EAAAA,EAAG,CAACR,KAAM,GAAGhE,SAAA,EACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,wFACPC,KAAM,UACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,kJAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHxF,MAAO,CACHC,MAAO,QAEXiG,SAnEHZ,IACrB,MAAMvE,EAAK,IAAI+K,EAAgBE,YAAa1G,GAC5CyG,EAAkBhL,GAClBP,EAAK+B,eAAe,CAACuH,MAAM,MAAM,EAiETrE,YAAY,iHACZC,gBAAgB,QAChBC,QAASgD,QAGjBpJ,EAAAA,EAAAA,KAAC6R,EAAe,CAACvJ,WAAYrD,EAAeoD,SAAUqE,EAAW5H,iBAAkB9D,QAEvFb,EAAAA,EAAAA,MAACyE,EAAAA,EAAG,CAACR,KAAM,GAAGhE,SAAA,EACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,kFACPC,KAAM,QACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,4IAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHxF,MAAO,CACHC,MAAO,QAEXwF,YAAY,2GACZC,gBAAgB,QAChBC,QAASkL,QAGjBtR,EAAAA,EAAAA,KAAC8R,EAAa,CAAChN,iBAAkBA,WAIzC3E,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,gCACfH,MAAO,oBACPC,KAAM,gBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,2JACfH,MAAO,uGACPC,KAAM,mBAKlBO,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC+R,EAAAA,EAAY,CACTlS,UAAU,EACVC,cAAe,sCACfH,MAAO,iBACPC,KAAM,oBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC+R,EAAAA,EAAY,CACTlS,UAAU,EAAMC,cAAe,+IAC/BH,MAAO,qFACPC,KAAM,uBAKlBO,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACgS,EAAAA,EAAe,CACZnS,UAAU,EACVC,cAAe,0LACfH,MAAO,wFACPC,KAAM,aAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACgS,EAAAA,EAAe,CAEZrS,MAAO,6JACPC,KAAM,uBAMlBO,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,2LACfH,MAAO,kPACPC,KAAM,cAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAO,iLACPC,KAAM,eACNS,MAAO,CAAC,CACJR,UAAU,EAAMS,QAAS,iGAE7B+D,WAAY,CACRD,KAAM,IACRhE,UAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,QAAM,CACHxF,MAAO,CACHC,MAAO,QAEXwF,YAAY,mIACZC,gBAAgB,QAChBC,QAAS8K,aAMzB/Q,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAO,0MACPC,KAAM,qBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAO,6HACPC,KAAM,iBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAO,oOACPC,KAAM,oBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAO,uGACPC,KAAM,wBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAO,wFACPC,KAAM,uBAMlBO,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAO,iIACPC,KAAM,qBAKdI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EAAMC,cAAe,sHAC/BH,MAAO,iIACPC,KAAM,wBAOlBO,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAM,sHACNC,KAAM,aACNS,MAAO,CAAC,CAACR,UAAU,EAAMS,QAAS,8HAA0BF,UAC5DJ,EAAAA,EAAAA,KAACqG,EAAAA,EAAO,CAAAjG,UACJJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAM,CACHC,SAAU,EACVC,SAAUkF,EACVjF,SAAS,eACTC,SAnfNsL,IAA8B,IAA5BxL,SAAUI,GAAYoL,EAE9C,GAAiC,IAA7BtG,EAAkB1D,QAAuC,IAAvBpB,EAAYoB,OAAc,CAAC,IAADiK,EAC5DjR,EAAK+B,eAAe,CAACwH,WAAY,KACjC,MAAMxE,EAAK,CAAqB,QAArBkM,EAACvG,EAAkB,UAAE,IAAAuG,OAAA,EAApBA,EAAsBxD,KAIlCb,GAAmB,CAAC7L,IAAK,iBAAkB+L,IAH/B,CACRoE,UAAWnM,KAGf4F,EAAqB,GACzB,CACA,MAAMhJ,EAAW,IAAIC,SAEM,IAAvBgE,EAAYoB,SACZrF,EAASE,OAAO,kBAAmB+D,EAAY,GAAGnB,eAClDkH,EAAmB,CAAC5K,IAAK,iBAAkBY,aAC3C0J,EAAY,QAChB,EAme4BvF,UAAWA,GACXiB,aAAcA,KAAM,EAAM5H,SAEzBuL,EAAkB1D,OAAS,EAAI,GAAK,kBAKrDjI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAM,+IACNC,KAAM,cACNS,MAAO,CAAC,CAACR,UAAU,EAAMS,QAAS,8HAA0BF,UAC5DJ,EAAAA,EAAAA,KAACqG,EAAAA,EAAO,CAAAjG,UACJJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAM,CACHC,SAAU,EACVC,SAAUoF,EACVnF,SAAS,eACTC,SAjfLyL,IAA8B,IAA5B3L,SAAUI,GAAYuL,EAE/C,GAAkC,IAA9BvG,EAAmB5D,QAAuC,IAAvBpB,EAAYoB,OAAc,CAAC,IAADoK,EAC7DpR,EAAK+B,eAAe,CAACyH,YAAa,KAClC,MAAMzE,EAAK,CAAsB,QAAtBqM,EAACxG,EAAmB,UAAE,IAAAwG,OAAA,EAArBA,EAAuB3D,KAInCb,GAAmB,CAAC7L,IAAK,iBAAkB+L,IAH/B,CACRoE,UAAWnM,KAGf8F,EAAsB,GAC1B,CACA,MAAMlJ,EAAW,IAAIC,SAEM,IAAvBgE,EAAYoB,SACZrF,EAASE,OAAO,kBAAmB+D,EAAY,GAAGnB,eAClDkH,EAAmB,CAAC5K,IAAK,iBAAkBY,aAC3C0J,EAAY,SAChB,EAie4BvF,UAAWA,GACXiB,aAAcA,KAAM,EAAM5H,SAEzByL,EAAmB5D,OAAS,EAAI,GAAK,qBAM1D9H,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAM,8IACNC,KAAM,kBACNS,MAAO,CAAC,CAACR,UAAU,EAAMS,QAAS,8HAA0BF,UAC5DJ,EAAAA,EAAAA,KAACqG,EAAAA,EAAO,CAAAjG,UACJJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAM,CACHC,SAAU,EACVC,SAAUsF,EACVrF,SAAS,eACTC,SAlfJ2L,IAA4B,IAA1B7L,SAAUI,GAAYyL,EAChD,GAAIzL,EAAYoB,OAAO8D,EAAsB9D,OACzC,OAEJ,MAAMrF,EAAW,IAAIC,SACM,IAAvBgE,EAAYoB,SACZrF,EAASE,OAAO,kBAAmB+D,EAAYA,EAAYoB,OAAO,GAAGvC,eACrEkH,EAAmB,CAAC5K,IAAK,iBAAkBY,aAC3C0J,EAAY,YAChB,EA0e4BvF,UAAWA,GACXiB,aAAcA,KAAM,EACpBuK,SAzeCrL,IAC7B,MAAMsL,EAAmB,GAEzBzG,EAAsBlG,KAAKiB,KACd,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO4H,QAAU,OAAJxH,QAAI,IAAJA,OAAI,EAAJA,EAAMwH,MACnB8D,EAAmBhJ,KAAK1C,EAC5B,KAEC0L,EAAmBvK,OAAO,GAC3BhH,EAAK+B,eAAe,CAAC0H,gBAAiB,KAE1C,MAAMqD,EAAM,CACRoE,UAAW,CAAK,OAAJjL,QAAI,IAAJA,OAAI,EAAJA,EAAMwH,MAEtBb,GAAmB,CAAC7L,IAAK,iBAAkB+L,QAC3C/B,EAAyBwG,EAAmB,EA0doBpS,SAEnC2L,EAAsB9D,OAAS,EAAI,GAAK,mBAKzDjI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAM,sHACNC,KAAM,kBACNS,MAAO,CAAC,CAACR,UAAU,EAAMS,QAAS,8HAA0BF,UAC5DJ,EAAAA,EAAAA,KAACqG,EAAAA,EAAO,CAAAjG,UACJJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAM,CACHC,SAAU,EACVC,SAAUwF,EACVvF,SAAS,eACTC,SAteJ8L,IAA4B,IAA1BhM,SAAUI,GAAY4L,EAChD,GAAI5L,EAAYoB,OAAOgE,EAAsBhE,OACzC,OAEJ,MAAMrF,EAAW,IAAIC,SACM,IAAvBgE,EAAYoB,SACZrF,EAASE,OAAO,kBAAmB+D,EAAYA,EAAYoB,OAAO,GAAGvC,eACrEkH,EAAmB,CAAC5K,IAAK,iBAAkBY,aAC3C0J,EAAY,YAChB,EA8d4BvF,UAAWA,GACXiB,aAAcA,KAAM,EACpBuK,SA7dCrL,IAC7B,MAAMsL,EAAmB,GAEzBvG,EAAsBpG,KAAKiB,KACd,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO4H,QAAU,OAAJxH,QAAI,IAAJA,OAAI,EAAJA,EAAMwH,MACnB8D,EAAmBhJ,KAAK1C,EAC5B,KAEC0L,EAAmBvK,OAAO,GAC3BhH,EAAK+B,eAAe,CAAC2H,gBAAiB,KAE1C,MAAMoD,EAAM,CACRoE,UAAW,CAAK,OAAJjL,QAAI,IAAJA,OAAI,EAAJA,EAAMwH,MAEtBb,GAAmB,CAAC7L,IAAK,iBAAkB+L,QAC3C7B,EAAyBsG,EAAmB,EA8coBpS,SAEnC6L,EAAsBhE,OAAS,EAAI,GAAK,mBAKzDjI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACNP,MAAM,kIACNC,KAAM,oBACNS,MAAO,CAAC,CAACR,UAAU,EAAMS,QAAS,8HAA0BF,UAC5DJ,EAAAA,EAAAA,KAACqG,EAAAA,EAAO,CAAAjG,UACJJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAM,CACHC,SAAU,EACVC,SAAU0F,EACVzF,SAAS,eACTC,SA1dF+L,IAA4B,IAA1BjM,SAAUI,GAAY6L,EAClD,GAAI7L,EAAYoB,OAAOkE,EAAwBlE,OAC3C,OAEJ,MAAMrF,EAAW,IAAIC,SACM,IAAvBgE,EAAYoB,SACZrF,EAASE,OAAO,kBAAmB+D,EAAYA,EAAYoB,OAAO,GAAGvC,eACrEkH,EAAmB,CAAC5K,IAAK,iBAAkBY,aAC3C0J,EAAY,cAChB,EAkd4BvF,UAAWA,GACXiB,aAAcA,KAAM,EACpBuK,SAjdGrL,IAC/B,MAAMsL,EAAmB,GAEzBrG,EAAwBtG,KAAKiB,KAChB,OAALA,QAAK,IAALA,OAAK,EAALA,EAAO4H,QAAU,OAAJxH,QAAI,IAAJA,OAAI,EAAJA,EAAMwH,MACnB8D,EAAmBhJ,KAAK1C,EAC5B,KAEC0L,EAAmBvK,OAAO,GAC3BhH,EAAK+B,eAAe,CAAC4H,kBAAmB,KAE5C,MAAMmD,EAAM,CACRoE,UAAW,CAAK,OAAJjL,QAAI,IAAJA,OAAI,EAAJA,EAAMwH,MAEtBb,GAAmB,CAAC7L,IAAK,iBAAkB+L,QAC3C3B,EAA2BoG,EAAmB,EAkcoBpS,SAErC+L,EAAwBlE,OAAS,EAAI,GAAK,sBAM/DjI,EAAAA,EAAAA,KAACkI,EAAK,CAACuB,MAAO,EAAErJ,SAAC,wMACjBJ,EAAAA,EAAAA,KAACC,EAAAA,EAAK0S,KAAI,CAAC/S,KAAK,iBAAgBQ,SAC3BA,CAACwS,EAAMC,KAAA,IAAE,IAACC,EAAG,OAAEC,GAAOF,EAAA,OACnB1S,EAAAA,EAAAA,MAAA6S,EAAAA,SAAA,CAAA5S,SAAA,CACKwS,EAAO/M,KAAI,CAACoN,EAAOC,KAEZ/S,EAAAA,EAAAA,MAAA,OAA0BM,MAAO,CAAC0S,aAAc,IAAI/S,SAAA,EAChDD,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,4BACfH,MAAK,6DAAA8C,OAA+DyQ,EAAQ,GAC5EtT,KAAM,CAACqT,EAAMrT,KAAM,iBAG3BI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAK,0PAAA8C,OAAyDyQ,EAAQ,GACtEtT,KAAM,CAACqT,EAAMrT,KAAM,oBAM/BI,EAAAA,EAAAA,KAACC,EAAAA,EAAK0S,KAAI,CAAC/S,KAAM,CAACqT,EAAMrT,KAAK,yBAA0Ba,MAAO,CAAC2S,YAAY,SAAShT,SAC/EA,CAACwS,EAAMS,KAAA,IAAGP,IAAIQ,EAAUP,OAAOQ,GAAYF,EAAA,OACxClT,EAAAA,EAAAA,MAAA6S,EAAAA,SAAA,CAAA5S,SAAA,CACKwS,EAAO/M,KAAI,CAAC2N,EAAYC,KAEjBzT,EAAAA,EAAAA,KAAA,OAA+BS,MAAO,CAAC0S,aAAc,IAAI/S,UACrDD,EAAAA,EAAAA,MAACuE,EAAAA,EAAG,CAACC,OAAQ,GAAGvE,SAAA,EAEZJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAIsP,OAAQ,EAAGC,UAAW,kBAAkBvT,UACnDJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,4BACfH,MAAK,oDAAA8C,OAAsDgR,EAAa,GACxE7T,KAAM,CAAC4T,EAAW5T,KAAM,eAGhCI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,4BACfH,MAAK,+CAAA8C,OAA2CgR,EAAa,GAC7D1T,QAAS,gEACTH,KAAM,CAAC4T,EAAW5T,KAAM,iBAGhCI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAIsP,OAAQ,EAAGC,UAAW,kBAAkBvT,UACnDJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAK,uOAAA8C,OAAqDgR,EAAa,GACvE7T,KAAM,CAAC4T,EAAW5T,KAAM,eAIhCI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,GAAGhE,UACVJ,EAAAA,EAAAA,KAAC6E,EAAAA,EAAS,CACNhF,UAAU,EACVC,cAAe,sHACfH,MAAK,2LAAA8C,OAAqDgR,EAAa,EAAC,sFAExE1T,QAAS,8PACTH,KAAM,CAAC4T,EAAW5T,KAAM,iBAGhCI,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAACR,KAAM,EAAGsP,OAAQ,EAAEtT,UAExBD,EAAAA,EAAAA,MAAC+H,EAAK,CAACuB,MAAO,EAAErJ,SAAA,CAAC,KAACJ,EAAAA,EAAAA,KAAC4T,EAAAA,EAAmB,CAClCzQ,QAASA,IAAMoQ,EAAYC,EAAW5T,QAAQ,sQA1ChD4T,EAAWK,aAsD7B7T,EAAAA,EAAAA,KAAC0E,EAAAA,EAAG,CAAAtE,UACAJ,EAAAA,EAAAA,KAAC4E,EAAAA,EAAG,CAAC8O,OAAQ,EAAGtP,KAAM,GAAGhE,UAC7BJ,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CAAAE,UACNJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAAEC,KAAK,UAAUC,QAASA,IAAMmQ,IAAYQ,OAAK,EAChDrT,MAAO,CAACsT,gBAAiB,WAAW3T,SAAC,kNAQlD,KAIXD,EAAAA,EAAAA,MAAC+H,EAAK,CAACuB,MAAO,EAAErJ,SAAA,CAAC,KAACJ,EAAAA,EAAAA,KAAC4T,EAAAA,EAAmB,CAClCzQ,QAASA,IAAM4P,EAAOE,EAAMrT,QAAQ,wOAlGlCqT,EAAMY,aAwGxB7T,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CAAAE,UACNJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACC,KAAK,UAAUC,QAASA,IAAM2P,IAAOgB,OAAK,EAC1CrT,MAAO,CAACsT,gBAAiB,WAAW3T,SAAC,+NAKlD,KAKXJ,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACC,KAAK,UAAU8Q,SAAS,SAASvT,MAAO,CAACC,MAAO,OAAQuT,UAAW,QAAQ7T,SAC9EmN,GAAiB,gHAAwB,gHAGpD,C","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormInputNumber.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/Car/AddTypeModal.jsx","pages/sample/Car/AddBrandModal.jsx","pages/sample/Car/AddCountryModal.jsx","pages/sample/Car/CarPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form,  InputNumber} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInputNumber = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <InputNumber style={{width:'100%'}}/>\n        </Form.Item>\n    );\n};\n\nexport default FormInputNumber;\n\nFormInputNumber.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Modal, Row} from \"antd\";\nimport {AppLoader} from \"../../../@crema\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport {useMutation} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport PropTypes from \"prop-types\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n\n};\n\nconst AddTypeModal = ({refetchTypes}) => {\n    const [form] = Form.useForm();\n\n\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n\n    // query-types\n    const {\n        mutate: postTypesMutate,\n        data: postTypes,\n        isLoading: postTypesLoading,\n        isSuccess: postTypesSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    const showModal = () => {\n        setIsModalOpen(true);\n\n    };\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n\n\n        postTypesMutate({url: \"/cars/types/\", data: formData});\n\n\n    }\n\n    const handleOk = () => {\n        form\n            .validateFields()\n            .then((values) => {\n                // Call your onFinish function with the form values\n                onFinish(values);\n\n                // Close the modal\n\n                // Reset the form fields\n\n            })\n            .catch((errorInfo) => {\n                console.log('Failed:', errorInfo);\n            });\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n    };\n\n    useEffect(() => {\n        if (postTypesSuccess){\n            refetchTypes()\n            setIsModalOpen(false)\n            form.setFieldsValue(initialValueForm)\n        }\n    }, [postTypes]);\n\n\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    return (\n        <div>\n            <Button type=\"primary\" onClick={showModal}>\n                Создать новый тип\n            </Button>\n            <Modal title=\"Новый тип\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n                    {(postTypesLoading) ?\n                        <AppLoader/> :\n                        <Form\n                            form={form}\n                            name=\"basic\"\n                            labelCol={{\n                                span: 24\n                            }}\n                            wrapperCol={{\n                                span: 24\n                            }}\n                            style={{\n                                maxWidth: \"100%\"\n                            }}\n                            initialValues={initialValueForm}\n                            onFinish={onFinish}\n                            onFinishFailed={onFinishFailed}\n                            autoComplete=\"off\"\n                        >\n                            <Row gutter={20}>\n                                <Col span={12}>\n                                    <FormInput\n                                        required={true}\n                                        required_text={'Tur nomini kiritishingiz kerak'}\n                                        label={'Tur nomi Uz'}\n                                        name={'title_uz'}\n                                    />\n\n\n                                </Col>\n                                <Col span={12}>\n                                    <FormInput\n                                        required={true}\n                                        required_text={'Необходимо ввести название типа'}\n                                        label={'Название типа Ru'}\n                                        name={'title_ru'}\n                                    />\n\n                                </Col>\n                            </Row>\n\n\n                        </Form>\n                    }\n            </Modal>\n        </div>\n    );\n};\n\nAddTypeModal.propTypes={\n    refetchTypes:PropTypes.func\n}\n\n\nexport default AddTypeModal;","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Modal, Row, Select, Upload} from \"antd\";\nimport {AppLoader} from \"../../../@crema\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport PropTypes from \"prop-types\";\nimport ImgCrop from \"antd-img-crop\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n\n};\n\nconst AddBrandModal = ({refetchCountries}) => {\n    const [form] = Form.useForm();\n\n\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [fileListProps, setFileListProps] = useState([]);\n\n    // query-countries-get\n    const {data: countriesData} = useQuery(\n        'get-countries',\n        () => apiService.getData('/cars/countries/')\n    );\n\n    // query-brands\n    const {\n        mutate: postBrandsMutate,\n        data: postBrands,\n        isLoading: postBrandsLoading,\n        isSuccess: postBrandsSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    const showModal = () => {\n        setIsModalOpen(true);\n\n    };\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n        formData.append('country', values.country);\n\n            formData.append('image', fileListProps[0]?.originFileObj);\n\n            postBrandsMutate({url: \"/cars/brands/\", data: formData});\n\n\n    }\n\n    const handleOk = () => {\n        form\n            .validateFields()\n            .then((values) => {\n                // Call your onFinish function with the form values\n                onFinish(values);\n\n                // Close the modal\n\n                // Reset the form fields\n\n            })\n            .catch((errorInfo) => {\n                console.log('Failed:', errorInfo);\n            });\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n    };\n\n    useEffect(() => {\n        if (postBrandsSuccess){\n            refetchCountries()\n            setIsModalOpen(false)\n            form.setFieldsValue(initialValueForm)\n\n        }\n    }, [postBrands]);\n\n\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    // option types\n    const optionsTypes = useMemo(() => {\n        return countriesData?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [countriesData]);\n\n    // image\n    const onChange = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({image: newFileList});\n    };\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n    return (\n        <div>\n            <Button type=\"primary\" onClick={showModal}>\n                Создать новый бренд\n            </Button>\n            <Modal title=\"Новый тип\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel}>\n                    {(postBrandsLoading ) ?\n                        <AppLoader/> :\n                        <Form\n                            form={form}\n                            name=\"basic\"\n                            labelCol={{\n                                span: 24\n                            }}\n                            wrapperCol={{\n                                span: 24\n                            }}\n                            style={{\n                                maxWidth: \"100%\"\n                            }}\n                            initialValues={initialValueForm}\n                            onFinish={onFinish}\n                            onFinishFailed={onFinishFailed}\n                            autoComplete=\"off\"\n                        >\n                            <Row gutter={20}>\n                                <Col span={12}>\n                                    <FormInput\n                                        required={true}\n                                        required_text={'Brand kiritishingiz kerak'}\n                                        label={'Brand Uz'}\n                                        name={'title_uz'}\n                                    />\n\n\n                                </Col>\n                                <Col span={12}>\n                                    <FormInput\n                                        required={true}\n                                        required_text={'Вы должны ввести бренд'}\n                                        label={'Бренд Ru'}\n                                        name={'title_ru'}\n                                    />\n\n                                </Col>\n                                <Col span={24}>\n                                    <Form.Item\n                                        label={'Выберите страну'}\n                                        name={'country'}\n                                        rules={[{\n                                            required: true, message: 'Страну должны быть выбраны'\n                                        }]}\n                                        wrapperCol={{\n                                            span: 24,\n                                        }}\n                                    >\n                                        <Select\n                                            style={{\n                                                width: '100%',\n                                            }}\n                                            placeholder='Выберите одну типы'\n                                            optionLabelProp='label'\n                                            options={optionsTypes}\n                                        />\n                                    </Form.Item>\n\n                                </Col>\n                            </Row>\n                            <Row gutter={20}>\n                                <Col span={12}>\n                                    <Form.Item\n                                        label='Изображение бренда'\n                                        name={'image'}\n                                        rules={[{required: true, message: 'Требуется изображение бренда'}]}>\n                                        <ImgCrop rotationSlider>\n                                            <Upload\n                                                maxCount={1}\n                                                fileList={fileListProps}\n                                                listType='picture-card'\n                                                onChange={onChange}\n                                                onPreview={onPreview}\n                                                beforeUpload={() => false}\n                                            >\n                                                {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                            </Upload>\n                                        </ImgCrop>\n                                    </Form.Item>\n                                </Col>\n                            </Row>\n\n                        </Form>\n                    }\n            </Modal>\n        </div>\n    );\n};\n\nAddBrandModal.propTypes={\n    refetchCountries:PropTypes.func\n}\n\n\nexport default AddBrandModal;","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Modal, Row, Select,  Typography} from \"antd\";\nimport {AppLoader} from \"../../../@crema\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport {useMutation} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport PropTypes from \"prop-types\";\n\nconst {Title} = Typography\n\nconst initialValueForm = {\n    title_ru: \"\",\n    title_uz: \"\",\n    type: [\n    ]\n};\n\nconst initialValueFormEditCountry = {\n    title_ru: \"\",\n    type:[]\n};\n\nconst AddCountryModal = ({refetchCountries,arrTypes,arrCountry}) => {\n    const [form] = Form.useForm();\n\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isNewCountry, setIsNewCountry] = useState(false)\n    const [chooseAction, setChooseAction] = useState(false)\n    // const [findCountry, setFindCountry] = useState({})\n\n\n    // query-brands\n    const {\n        mutate: postBrandsMutate,\n        data: postBrands,\n        isLoading: postBrandsLoading,\n        isSuccess: postBrandsSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    const {\n        mutate: putCountries,\n        isLoading: putCountriesLoading,\n        data: putData,\n        isSuccess: putCountriesSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    const showModal = () => {\n        setIsModalOpen(true);\n\n    };\n\n\n    const onFinish = (values) => {\n        const findCountry=arrCountry.find(country=>country?.id===values.title_ru)\n        const data={\n            title_ru:findCountry.title_ru,\n            title_uz:findCountry.title_uz,\n            type:values.type\n        }\n        if (isNewCountry){\n        postBrandsMutate({url: \"/cars/countries/\", data: values});\n        }else{\n            putCountries({url: '/cars/countries', data, id: values.title_ru})\n        }\n    }\n\n    const checkAction = (isNew) => {\n        setIsNewCountry(isNew)\n        setChooseAction(true)\n    }\n\n    const handleOk = () => {\n        form\n            .validateFields()\n            .then((values) => {\n                onFinish(values);\n\n            })\n            .catch((errorInfo) => {\n                console.log('Failed:', errorInfo);\n            });\n    };\n    const handleCancel = () => {\n        setIsModalOpen(false);\n        setChooseAction(false)\n    };\n\n    useEffect(() => {\n        if (postBrandsSuccess||putCountriesSuccess) {\n            refetchCountries()\n            setIsModalOpen(false)\n            form.setFieldsValue(initialValueForm)\n\n        }\n    }, [postBrands,putData]);\n\n\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n    const onchangeCoutry=(value)=>{\n        const typeId=[]\n        const findCountries=arrCountry.find(country=>country?.id===value)\n        findCountries.types.map(type=>{\n            typeId.push(type.id)\n        })\n        form.setFieldsValue({type:typeId})\n        // setFindCountry(findCountries)\n    }\n\n    // option types\n    const optionsTypes = useMemo(() => {\n        return arrTypes?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [arrTypes]);\n\n\n    const optionsCountries = useMemo(() => {\n        return arrCountry?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [arrCountry]);\n\n\n    return (\n        <div>\n            <Button type=\"primary\" onClick={showModal}>\n                Создать новый страна\n            </Button>\n            <Modal title=\"Новый тип\" open={isModalOpen} onOk={handleOk} onCancel={handleCancel} width={600}>\n                {\n                    !chooseAction ?\n                        <Row>\n                            <Col span={24}>\n                                <Title level={3}>Добавляете ли вы новую страну или объединяете новый тип со страной</Title>\n                            </Col>\n                            <Col span={10}>\n                                <Button type=\"primary\" onClick={() => checkAction(true)}>\n                                    Добавить новую страну\n                                </Button>\n                            </Col>\n                            <Col span={14}>\n                                <Button type=\"primary\" onClick={() => checkAction(false)}>\n                                    Объединить новый тип со страной\n                                </Button>\n                            </Col>\n                        </Row>\n                        :\n                        (postBrandsLoading||putCountriesLoading) ?\n                            <AppLoader/> :\n\n                            isNewCountry ?\n                                <Form\n                                    form={form}\n                                    name=\"basic\"\n                                    labelCol={{\n                                        span: 24\n                                    }}\n                                    wrapperCol={{\n                                        span: 24\n                                    }}\n                                    style={{\n                                        maxWidth: \"100%\"\n                                    }}\n                                    initialValues={initialValueForm}\n                                    onFinish={onFinish}\n                                    onFinishFailed={onFinishFailed}\n                                    autoComplete=\"off\"\n                                >\n                                    <Row gutter={20}>\n                                        <Col span={12}>\n                                            <FormInput\n                                                required={true}\n                                                required_text={'Mamlakat nomini kiritishingiz kerak'}\n                                                label={'Mamlakat nomi Uz'}\n                                                name={'title_uz'}\n                                            />\n\n\n                                        </Col>\n                                        <Col span={12}>\n                                            <FormInput\n                                                required={true}\n                                                required_text={'Необходимо ввести название страна'}\n                                                label={'Название страна Ru'}\n                                                name={'title_ru'}\n                                            />\n\n                                        </Col>\n                                        <Col span={24}>\n                                            <Form.Item\n                                                label={'Выберите типы'}\n                                                name={'type'}\n                                                rules={[{\n                                                    required: true, message: 'Типы должны быть выбраны'\n                                                }]}\n                                                wrapperCol={{\n                                                    span: 24,\n                                                }}\n                                            >\n                                                <Select\n                                                    mode={'multiple'}\n                                                    style={{\n                                                        width: '100%',\n                                                    }}\n                                                    placeholder='Выберите одну типы'\n                                                    optionLabelProp='label'\n                                                    options={optionsTypes}\n                                                />\n                                            </Form.Item>\n\n                                        </Col>\n                                    </Row>\n                                </Form> :\n                                <Form\n                                    form={form}\n                                    name=\"basic\"\n                                    labelCol={{\n                                        span: 24\n                                    }}\n                                    wrapperCol={{\n                                        span: 24\n                                    }}\n                                    style={{\n                                        maxWidth: \"100%\"\n                                    }}\n                                    initialValues={initialValueFormEditCountry}\n                                    onFinish={onFinish}\n                                    onFinishFailed={onFinishFailed}\n                                    autoComplete=\"off\"\n                                >\n                                    <Row gutter={20}>\n\n                                        <Col span={12}>\n                                            <Form.Item\n                                                label={'Выберите страна'}\n                                                name={'title_ru'}\n                                                rules={[{\n                                                    required: true, message: 'Страна должны быть выбраны'\n                                                }]}\n                                                wrapperCol={{\n                                                    span: 24,\n                                                }}\n                                            >\n                                                <Select\n                                                    style={{\n                                                        width: '100%',\n                                                    }}\n                                                    placeholder='Выберите одну типы'\n                                                    optionLabelProp='label'\n                                                    onChange={onchangeCoutry}\n                                                    options={optionsCountries}\n                                                />\n                                            </Form.Item>\n\n                                        </Col>\n                                        <Col span={12}>\n                                            <Form.Item\n                                                label={'Выберите типы'}\n                                                name={'type'}\n                                                rules={[{\n                                                    required: true, message: 'Типы должны быть выбраны'\n                                                }]}\n                                                wrapperCol={{\n                                                    span: 24,\n                                                }}\n                                            >\n                                                <Select\n                                                    mode={'multiple'}\n                                                    style={{\n                                                        width: '100%',\n                                                    }}\n                                                    placeholder='Выберите одну типы'\n                                                    optionLabelProp='label'\n                                                    options={optionsTypes}\n                                                />\n                                            </Form.Item>\n\n                                        </Col>\n                                    </Row>\n                                </Form>\n\n\n                }\n\n\n            </Modal>\n        </div>\n    );\n};\n\nAddCountryModal.propTypes = {\n    refetchCountries: PropTypes.func,\n    arrTypes:PropTypes.array,\n    arrCountry:PropTypes.array\n}\n\n\nexport default AddCountryModal;","import React, {useEffect, useMemo, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload, Typography, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {MinusCircleOutlined} from \"@ant-design/icons\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\nimport FormInputNumber from \"../../../@crema/core/Form/FormInputNumber\";\nimport AddTypeModal from \"./AddTypeModal\";\nimport AddBrandModal from \"./AddBrandModal\";\nimport AddCountryModal from \"./AddCountryModal\";\nimport './carPostEdit.css'\nconst {Title} = Typography\n\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    main_text_uz: \"\",\n    main_text_ru: \"\",\n    price: \"\",\n    credit_price: \"\",\n    colour: \"\",\n    is_available: null,\n    power_reserve: \"\",\n    max_speed: \"\",\n    acceleration: \"\",\n    battery_capacity: \"\",\n    num_of_seats: \"\",\n    review_link_1: \"\",\n    review_link_2: \"\",\n    type: null,\n    country: null,\n    brand: null,\n    main_image: null,\n    inner_image: null,\n    exterior_images: [],\n    interior_images: [],\n    technology_images: [],\n    characteristic: [\n        {\n            title_uz: \"\",\n            title_ru: \"\",\n            characteristics_child: [\n                {\n                    key_uz: \"\",\n                    key_ru: \"\",\n                    value_uz: \"\",\n                    value_ru: \"\",\n                }\n            ]\n        }\n    ]\n};\n\n\nconst CarPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListPropsMain, setFileListPropsMain] = useState([]);\n    const [fileListPropsInner, setFileListPropsInner] = useState([]);\n    const [fileListPropsExterior, setFileListPropsExterior] = useState([]);\n    const [fileListPropsInterior, setFileListPropsInterior] = useState([]);\n    const [fileListPropsTechnology, setFileListPropsTechnology] = useState([]);\n\n    const [isUpload, setIsUpload] = useState('');\n    const [getSelectValue, setGetSelectValue] = useState({\n        typeId:\"\",\n        countriesId:\"\",\n    })\n\n\n    // query-types-get\n    const {data: typesData,refetch:refetchTypes} = useQuery(\n        'get-types',\n        () => apiService.getData('/cars/types/')\n    );\n\n    // query-countries-get\n    const {data: countriesData,refetch:refetchCountries} = useQuery(\n        'get-countries',\n        () => apiService.getData('/cars/countries/'),\n\n    );\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n    // query-car\n    const {\n        mutate: postCarMutate, data: postCar, isLoading: postCarLoading, isSuccess: postCarSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editCarLoading,\n        data: editCarData,\n        refetch: editCarRefetch,\n        isSuccess: editCarSuccess,\n\n    } = useQuery([\"edit-car\", editId], () => apiService.getDataByID(\"/cars/cars\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putCar, isLoading: putCarLoading, data: putData, isSuccess: putCarSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // delete image\n\n    const {mutate: imagesDeleteMutate} = useMutation(({url, ids}) => apiService.deleteImages(url, ids), {\n        onSuccess: () => message.success('Success'), onError: (error) => message.error(error.message)\n    });\n\n    //                                              =====useEffect====\n\n    // car success\n    useEffect(() => {\n        if (putCarSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postCarSuccess || putCarSuccess) {\n            navigate('/car')\n        }\n    }, [postCar, putData])\n\n    // if edit car\n    useEffect(() => {\n        if (editId !== \"\") {\n            editCarRefetch();\n        }\n    }, [editId]);\n\n    // if no edit car\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n\n    }, []);\n\n\n    //edit car\n    useEffect(() => {\n        const exterior_images = [];\n        const interior_images = [];\n        const technology_images = [];\n\n\n        if (editCarData!==undefined){\n            editCarData.exterior_images.map(image=>{\n                const data={\n                    uid: image.id,\n                    name: image.id,\n                    status: \"done\",\n                    url: image.image\n                }\n                exterior_images.push(data)\n            })\n            editCarData.interior_images.map(image=>{\n                const data={\n                    uid: image.id,\n                    name: image.id,\n                    status: \"done\",\n                    url: image.image\n                }\n                interior_images.push(data)\n            })\n            editCarData.technology_images.map(image=>{\n                const data={\n                    uid: image.id,\n                    name: image.id,\n                    status: \"done\",\n                    url: image.image\n                }\n                technology_images.push(data)\n            })\n        }\n\n\n\n\n\n\n\n\n        const main_image = [{\n            uid: editCarData?.main_image?.id,\n            name: editCarData?.main_image?.id,\n            status: 'done',\n            url: editCarData?.main_image?.image,\n        }];\n        const inner_image = [{\n            uid: editCarData?.inner_image?.id,\n            name: editCarData?.inner_image?.id,\n            status: 'done',\n            url: editCarData?.inner_image?.image,\n        }];\n\n        if (editCarSuccess) {\n\n            const edit = {\n                title_uz: editCarData?.title_uz,\n                title_ru: editCarData?.title_ru,\n                main_text_uz: editCarData?.main_text_uz,\n                main_text_ru: editCarData?.main_text_ru,\n                price: editCarData?.price,\n                credit_price: editCarData?.credit_price,\n                colour: editCarData?.color.color,\n                is_available: editCarData?.is_available,\n                power_reserve: editCarData?.power_reserve,\n                max_speed: editCarData?.max_speed,\n                battery_capacity: editCarData?.battery_capacity,\n                acceleration: editCarData?.acceleration,\n                num_of_seats: editCarData?.num_of_seats,\n                review_link_1: editCarData?.reviews?.link_1,\n                review_link_2: editCarData?.reviews?.link_2,\n                type: editCarData?.type,\n                country: editCarData?.country,\n                brand: editCarData?.brand?.id,\n                main_image,\n                inner_image,\n                exterior_images,\n                interior_images,\n                technology_images,\n                characteristic:editCarData?.characteristic\n            }\n\n            setGetSelectValue({\n                typeId:editCarData.type,\n                countriesId:editCarData.country,\n            })\n            setFileListPropsMain(main_image);\n            setFileListPropsInner(inner_image);\n            setFileListPropsExterior(exterior_images);\n            setFileListPropsInterior(interior_images);\n            setFileListPropsTechnology(technology_images);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editCarData])\n    const onFinish = (values) => {\n\n\n        const exterior_images = []\n        const interior_images = []\n        const technology_images = []\n\n        fileListPropsExterior.map(image=>{\n            exterior_images.push(image.uid)\n        })\n        fileListPropsInterior.map(image=>{\n            interior_images.push(image.uid)\n        })\n        fileListPropsTechnology.map(image=>{\n            technology_images.push(image.uid)\n        })\n\n\n\n\n\n        const data = {\n            title_uz: values.title_uz,\n            title_ru: values.title_ru,\n            main_text_uz: values.main_text_uz,\n            main_text_ru: values.main_text_ru,\n            price: values.price,\n            credit_price: values.credit_price===\"\" ? null : values.credit_price,\n            colour: values.colour,\n            is_available: values.is_available,\n            power_reserve: values.power_reserve,\n            max_speed: values.max_speed,\n            acceleration: values.acceleration,\n            battery_capacity: values.battery_capacity,\n            num_of_seats: values.num_of_seats,\n            review_link_1: values.review_link_1,\n            review_link_2: values.review_link_2,\n            type: values.type,\n            country: values.country,\n            brand: values.brand,\n            main_image: fileListPropsMain[0]?.uid,\n            inner_image: fileListPropsInner[0]?.uid,\n            exterior_images,\n            interior_images,\n            technology_images,\n            characteristic: values?.characteristic\n        };\n        if (editCarSuccess) {\n            putCar({url: \"/cars/cars\", data, id: editId});\n        } else {\n            postCarMutate({url: \"/cars/cars/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n\n    useEffect(() => {\n        // MAIN\n        if (imagesUploadSuccess && isUpload === \"main\") {\n            const uploadImg = [{\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }]\n\n            form.setFieldsValue({main_image: uploadImg});\n            setFileListPropsMain(uploadImg);\n            setIsUpload('')\n        }\n        // INNER\n        if (imagesUploadSuccess && isUpload === \"inner\") {\n\n            const uploadImg = [{\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }]\n\n            form.setFieldsValue({inner_image: uploadImg});\n            setFileListPropsInner(uploadImg);\n            setIsUpload('')\n        }\n\n        // EXTERIOR\n        if (imagesUploadSuccess && isUpload === \"exterior\") {\n            const initialImage=[...fileListPropsExterior]\n            const uploadImg = {\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }\n            initialImage.push(uploadImg)\n            form.setFieldsValue({exterior_images: [uploadImg]});\n\n            setFileListPropsExterior(initialImage);\n            setIsUpload('')\n        }\n        // INTERIOR\n        if (imagesUploadSuccess && isUpload === \"interior\") {\n            const initialImage=[...fileListPropsInterior]\n            const uploadImg = {\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }\n            initialImage.push(uploadImg)\n            form.setFieldsValue({interior_images: [uploadImg]});\n            setFileListPropsInterior(initialImage);\n            setIsUpload('')\n        }\n        // TECHNOLOGY\n        if (imagesUploadSuccess && isUpload === \"technology\") {\n            const initialImage=[...fileListPropsTechnology]\n            const uploadImg = {\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }\n            initialImage.push(uploadImg)\n            form.setFieldsValue({technology_images: [uploadImg]});\n            setFileListPropsTechnology(initialImage);\n            setIsUpload('')\n        }\n\n    }, [imagesUpload]);\n    const onChangeMainImage = ({fileList: newFileList}) => {\n\n        if (fileListPropsMain.length !== 0 || newFileList.length === 0) {\n            form.setFieldsValue({main_image: []});\n            const id = [fileListPropsMain[0]?.uid];\n            const ids = {\n                image_ids: id\n            }\n            imagesDeleteMutate({url: \"/delete-images\", ids});\n            setFileListPropsMain([])\n        }\n        const formData = new FormData();\n\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[0].originFileObj);\n            imagesUploadMutate({url: \"/about/images/\", formData});\n            setIsUpload('main')\n        }\n    };\n\n    console.log(fileListPropsInterior)\n    const onChangeInnerImage = ({fileList: newFileList}) => {\n\n        if (fileListPropsInner.length !== 0 || newFileList.length === 0) {\n            form.setFieldsValue({inner_image: []});\n            const id = [fileListPropsInner[0]?.uid];\n            const ids = {\n                image_ids: id\n            }\n            imagesDeleteMutate({url: \"/delete-images\", ids});\n            setFileListPropsInner([])\n        }\n        const formData = new FormData();\n\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[0].originFileObj);\n            imagesUploadMutate({url: \"/about/images/\", formData});\n            setIsUpload('inner')\n        }\n    };\n    // Exterior Image\n\n    const onChangeExteriorImage=({fileList: newFileList})=>{\n        if (newFileList.length<fileListPropsExterior.length){\n            return\n        }\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[newFileList.length-1].originFileObj);\n            imagesUploadMutate({url: \"/about/images/\", formData});\n            setIsUpload('exterior')\n        }\n    }\n\n    const handleRemoveExteriorImage=(file)=>{\n        const withoutDeleteImage=[]\n\n        fileListPropsExterior.map((image)=>{\n            if (image?.uid!==file?.uid){\n                withoutDeleteImage.push(image)\n            }\n        })\n        if (!withoutDeleteImage.length>0){\n            form.setFieldsValue({exterior_images: []});\n        }\n        const ids = {\n            image_ids: [file?.uid]\n        }\n        imagesDeleteMutate({url: \"/delete-images\", ids});\n        setFileListPropsExterior(withoutDeleteImage)\n\n    }\n    //  Interior Image\n\n    const onChangeInteriorImage=({fileList: newFileList})=>{\n        if (newFileList.length<fileListPropsInterior.length){\n            return\n        }\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[newFileList.length-1].originFileObj);\n            imagesUploadMutate({url: \"/about/images/\", formData});\n            setIsUpload('interior')\n        }\n    }\n\n    const handleRemoveInteriorImage=(file)=>{\n        const withoutDeleteImage=[]\n\n        fileListPropsInterior.map((image)=>{\n            if (image?.uid!==file?.uid){\n                withoutDeleteImage.push(image)\n            }\n        })\n        if (!withoutDeleteImage.length>0){\n            form.setFieldsValue({interior_images: []});\n        }\n        const ids = {\n            image_ids: [file?.uid]\n        }\n        imagesDeleteMutate({url: \"/delete-images\", ids});\n        setFileListPropsInterior(withoutDeleteImage)\n\n    }\n\n    // Technology Image\n    const onChangeTechnologyImage=({fileList: newFileList})=>{\n        if (newFileList.length<fileListPropsTechnology.length){\n            return\n        }\n        const formData = new FormData();\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[newFileList.length-1].originFileObj);\n            imagesUploadMutate({url: \"/about/images/\", formData});\n            setIsUpload('technology')\n        }\n    }\n\n    const handleRemoveTechnologyImage=(file)=>{\n        const withoutDeleteImage=[]\n\n        fileListPropsTechnology.map((image)=>{\n            if (image?.uid!==file?.uid){\n                withoutDeleteImage.push(image)\n            }\n        })\n        if (!withoutDeleteImage.length>0){\n            form.setFieldsValue({technology_images: []});\n        }\n        const ids = {\n            image_ids: [file?.uid]\n        }\n        imagesDeleteMutate({url: \"/delete-images\", ids});\n        setFileListPropsTechnology(withoutDeleteImage)\n\n    }\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n    // selection\n    const optionAvailable = useMemo(() => {\n\n        return [\n            {\n                value: true,\n                label: 'В продаже',\n            },\n            {\n                value: false,\n                label: 'Нет в продаже',\n            },\n        ]\n    }, []);\n\n    // option types\n    const optionsTypes = useMemo(() => {\n        return typesData?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [typesData]);\n\n    // countries types\n    const optionsCountries = useMemo(() => {\n        if (!getSelectValue.typeId){\n            return []\n        }\n        const filterType=typesData?.find(type=>type.id===getSelectValue.typeId)\n        return filterType?.countries?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [getSelectValue.typeId,typesData]);\n\n    const optionsBrand = useMemo(() => {\n        if (!getSelectValue.countriesId){\n            return []\n        }\n        const filterCountry=countriesData?.find(country=>country.id===getSelectValue.countriesId)\n        return filterCountry?.brands?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [getSelectValue.countriesId,countriesData]);\n\n\n\n    const onChangeType=(value)=>{\n        const data={...getSelectValue,typeId:value}\n        setGetSelectValue(data)\n        form.setFieldsValue({country:null,brand:null})\n    }\n    const onChangeCountries=(value)=>{\n        const data={...getSelectValue, countriesId: value}\n        setGetSelectValue(data)\n        form.setFieldsValue({brand:null})\n    }\n\n\n\n    return (<div>\n        {(postCarLoading || editCarLoading || putCarLoading || imagesUploadLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n                <Row gutter={20}>\n                    <Col span={12}>\n                        <Form.Item\n                            label={'Выберите типы'}\n                            name={'type'}\n                            rules={[{\n                                required: true, message: 'Типы должны быть выбраны'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                onChange={onChangeType}\n                                placeholder='Выберите одну типы'\n                                optionLabelProp='label'\n                                options={optionsTypes}\n                            />\n                        </Form.Item>\n\n                        <AddTypeModal refetchTypes={refetchTypes}/>\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label={'Выберите страна'}\n                            name={'country'}\n                            rules={[{\n                                required: true, message: 'Страна должны быть выбраны'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                onChange={onChangeCountries}\n                                placeholder='Выберите одну страна'\n                                optionLabelProp='label'\n                                options={optionsCountries}\n                            />\n                        </Form.Item>\n                        <AddCountryModal arrCountry={countriesData} arrTypes={typesData} refetchCountries={refetchTypes}/>\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label={'Выберите бренд'}\n                            name={'brand'}\n                            rules={[{\n                                required: true, message: 'Бренд должны быть выбраны'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                placeholder='Выберите одну бренд'\n                                optionLabelProp='label'\n                                options={optionsBrand}\n                            />\n                        </Form.Item>\n                        <AddBrandModal refetchCountries={refetchCountries}/>\n                    </Col>\n                </Row>\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Moshina modeli talab qilinadi'}\n                            label={'Moshina modeli Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется модель автомобиля'}\n                            label={'Модель автомобиля Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Asosiy matn kiritish talab qilinada'}\n                            label={'Asosiy matn Uz'}\n                            name={'main_text_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true} required_text={'Основной текст обязателен'}\n                            label={'Основной текст Ru'}\n                            name={'main_text_ru'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInputNumber\n                            required={true}\n                            required_text={'Необходимо ввести цену автомобиля'}\n                            label={'Цена автомобиля'}\n                            name={'price'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInputNumber\n\n                            label={'Цена со скидкой на автомобиль'}\n                            name={'credit_price'}\n                        />\n\n                    </Col>\n                </Row>\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется указать цвет автомобиля.'}\n                            label={'Цвет автомобиля (введите код цвета, например: #000000)'}\n                            name={'colour'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label={'Доступно ли оно в настоящее время?'}\n                            name={'is_available'}\n                            rules={[{\n                                required: true, message: 'Вы должны выбрать'\n                            }]}\n                            wrapperCol={{\n                                span: 24,\n                            }}\n                        >\n                            <Select\n                                style={{\n                                    width: '100%',\n                                }}\n                                placeholder='Выберите статус продажи'\n                                optionLabelProp='label'\n                                options={optionAvailable}\n                            />\n                        </Form.Item>\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется заполнение'}\n                            label={'Как далеко он проходит на одном заряде?'}\n                            name={'power_reserve'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется заполнение'}\n                            label={'Самая высокая скорость'}\n                            name={'max_speed'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется заполнение'}\n                            label={'За сколько секунд он разгоняется от 0 до 100 км/ч?'}\n                            name={'acceleration'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется заполнение'}\n                            label={'Заряд батареи (кВтч)'}\n                            name={'battery_capacity'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Требуется заполнение'}\n                            label={'Количество мест'}\n                            name={'num_of_seats'}\n                        />\n\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={\"Требуется заполнение\"}\n                            label={'Ссылка на видео на ютубе 1'}\n                            name={'review_link_1'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true} required_text={'Требуется заполнение'}\n                            label={'Ссылка на видео на ютубе 2'}\n                            name={'review_link_2'}\n                        />\n\n                    </Col>\n                </Row>\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение основной'\n                            name={'main_image'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListPropsMain}\n                                    listType='picture-card'\n                                    onChange={onChangeMainImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListPropsMain.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                    <Col span={12}>\n                        <Form.Item\n                            label='Внутренний вид автомобиля'\n                            name={'inner_image'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListPropsInner}\n                                    listType='picture-card'\n                                    onChange={onChangeInnerImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListPropsInner.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={24}>\n                        <Form.Item\n                            label='Экстерьерные изображения'\n                            name={'exterior_images'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={5}\n                                    fileList={fileListPropsExterior}\n                                    listType='picture-card'\n                                    onChange={onChangeExteriorImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                    onRemove={handleRemoveExteriorImage}\n                                >\n                                    {fileListPropsExterior.length > 4 ? \"\" : \"+Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                    <Col span={24}>\n                        <Form.Item\n                            label='Интерьер изображения'\n                            name={'interior_images'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={5}\n                                    fileList={fileListPropsInterior}\n                                    listType='picture-card'\n                                    onChange={onChangeInteriorImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                    onRemove={handleRemoveInteriorImage}\n                                >\n                                    {fileListPropsInterior.length > 4 ? \"\" : \"+Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                    <Col span={24}>\n                        <Form.Item\n                            label='Технологии изображения'\n                            name={'technology_images'}\n                            rules={[{required: true, message: 'Требуется изображение'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={5}\n                                    fileList={fileListPropsTechnology}\n                                    listType='picture-card'\n                                    onChange={onChangeTechnologyImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                    onRemove={handleRemoveTechnologyImage}\n                                >\n                                    {fileListPropsTechnology.length > 4 ? \"\" : \"+Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Title level={3}>Добавить характеристики автомобиля</Title>\n                <Form.List name=\"characteristic\">\n                    {(fields, {add, remove}) => (\n                        <>\n                            {fields.map((field, index) => {\n                                return (\n                                    <div key={field.fieldKey} style={{marginBottom: 20}}>\n                                        <Row gutter={20}>\n\n                                            <Col span={12}>\n                                                <FormInput\n                                                    required={true}\n                                                    required_text={'To\\'ldirish talab qilinadi'}\n                                                    label={`Xususiyatni sarlavhasi misol uchun:(O'lchami va vazni) Uz ${index + 1}`}\n                                                    name={[field.name, 'title_uz']}\n                                                />\n                                            </Col>\n                                            <Col span={12}>\n                                                <FormInput\n                                                    required={true}\n                                                    required_text={'Требуется заполнение'}\n                                                    label={`Например, характерное название: (РАЗМЕР И МАССА) Ru ${index + 1}`}\n                                                    name={[field.name, 'title_ru']}\n                                                />\n                                            </Col>\n                                        </Row>\n\n\n                                        <Form.List name={[field.name,\"characteristics_child\"]} style={{paddingLeft:'100px'}}>\n                                            {(fields, {add:addChild, remove:removeChild}) => (\n                                                <>\n                                                    {fields.map((childField, childIndex) => {\n                                                        return (\n                                                            <div key={childField.fieldKey} style={{marginBottom: 20}}>\n                                                                <Row gutter={20} >\n\n                                                                    <Col span={11} offset={1} className={'character-child'}>\n                                                                        <FormInput\n                                                                            required={true}\n                                                                            required_text={'To\\'ldirish talab qilinadi'}\n                                                                            label={`Xususiyat nomi (Uzunlik*kenglik*balandlik,mm) Uz ${childIndex + 1}`}\n                                                                            name={[childField.name, 'key_uz']}\n                                                                        />\n                                                                    </Col>\n                                                                    <Col span={11} >\n                                                                        <FormInput\n                                                                            required={false}\n                                                                            required_text={'To\\'ldirish talab qilinadi'}\n                                                                            label={`Xususiyat qiymati (4630×1910×1655) Uz ${childIndex + 1}`}\n                                                                            warning={'!!! Agar ✅ qo\\'ymoqchi bo\\'lsangiz qatorni bo\\'sh qoldiring'}\n                                                                            name={[childField.name, 'value_uz']}\n                                                                        />\n                                                                    </Col>\n                                                                    <Col span={11} offset={1} className={'character-child'}>\n                                                                        <FormInput\n                                                                            required={true}\n                                                                            required_text={'Требуется заполнение'}\n                                                                            label={`Название характера (Длина*ширина*высота, мм) Ru ${childIndex + 1}`}\n                                                                            name={[childField.name, 'key_ru']}\n                                                                        />\n                                                                    </Col>\n\n                                                                    <Col span={11}>\n                                                                        <FormInput\n                                                                            required={false}\n                                                                            required_text={'Требуется заполнение'}\n                                                                            label={`Характеристическое значение (4630×1910×1655) Ru ${childIndex + 1},   \n                                                                            `}\n                                                                            warning={'!!! Если хотите поставить ✅, оставьте строку пустой'}\n                                                                            name={[childField.name, 'value_ru']}\n                                                                        />\n                                                                    </Col>\n                                                                    <Col span={6} offset={1}>\n\n                                                                    <Title level={3}> <MinusCircleOutlined\n                                                                        onClick={() => removeChild(childField.name)}/> Удалить  характеристики (Длина*ширина*высота, мм)</Title>\n                                                                    </Col>\n                                                                </Row>\n\n\n\n\n\n                                                            </div>\n\n                                                        );\n                                                    })}\n                                                    <Row>\n                                                        <Col offset={1} span={10}>\n                                                    <Form.Item>\n                                                        <Button  type=\"primary\" onClick={() => addChild()} block\n                                                                style={{backgroundColor: '#1677ff'}}>\n                                                            Нажмите, чтобы добавить новую функцию\n                                                        </Button>\n                                                    </Form.Item>\n\n                                                        </Col>\n                                                    </Row>\n\n                                                </>\n                                            )}\n                                        </Form.List>\n\n                                        <Title level={3}> <MinusCircleOutlined\n                                            onClick={() => remove(field.name)}/> Удалить имя характеристики (РАЗМЕР И МАССА)</Title>\n\n                                    </div>\n\n                                );\n                            })}\n                            <Form.Item>\n                                <Button type=\"primary\" onClick={() => add()} block\n                                        style={{backgroundColor: '#28a745'}}>\n                                    Открыть новый раздел для характеристика\n                                </Button>\n                            </Form.Item>\n\n                        </>\n                    )}\n                </Form.List>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editCarSuccess ? 'Изменить автомобиля' : 'Создать автомобиль'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default CarPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","InputNumber","style","width","TextArea","rows","initialValueForm","title_uz","title_ru","refetchTypes","form","useForm","isModalOpen","setIsModalOpen","useState","mutate","postTypesMutate","data","postTypes","isLoading","postTypesLoading","isSuccess","postTypesSuccess","useMutation","_ref2","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","onFinish","values","formData","FormData","append","useEffect","setFieldsValue","Button","type","onClick","showModal","Modal","title","open","onOk","handleOk","validateFields","then","catch","errorInfo","console","log","onCancel","handleCancel","AppLoader","labelCol","span","wrapperCol","maxWidth","initialValues","onFinishFailed","autoComplete","Row","gutter","Col","FormInput","refetchCountries","fileListProps","setFileListProps","countriesData","useQuery","getData","postBrandsMutate","postBrands","postBrandsLoading","postBrandsSuccess","_fileListProps$","country","originFileObj","optionsTypes","useMemo","map","option","value","id","Select","placeholder","optionLabelProp","options","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","image","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","window","document","write","outerHTML","beforeUpload","length","Title","Typography","initialValueFormEditCountry","arrTypes","arrCountry","isNewCountry","setIsNewCountry","chooseAction","setChooseAction","putCountries","putCountriesLoading","putData","putCountriesSuccess","editData","findCountry","find","checkAction","isNew","optionsCountries","mode","typeId","types","push","level","main_text_uz","main_text_ru","price","credit_price","colour","is_available","power_reserve","max_speed","acceleration","battery_capacity","num_of_seats","review_link_1","review_link_2","brand","main_image","inner_image","exterior_images","interior_images","technology_images","characteristic","characteristics_child","key_uz","key_ru","value_uz","value_ru","CarPostEdit","navigate","useNavigate","editId","useSelector","state","dispatch","useDispatch","fileListPropsMain","setFileListPropsMain","fileListPropsInner","setFileListPropsInner","fileListPropsExterior","setFileListPropsExterior","fileListPropsInterior","setFileListPropsInterior","fileListPropsTechnology","setFileListPropsTechnology","isUpload","setIsUpload","getSelectValue","setGetSelectValue","countriesId","typesData","refetch","imagesUploadMutate","imagesUpload","imagesUploadLoading","imagesUploadSuccess","postCarMutate","postCar","postCarLoading","postCarSuccess","editCarLoading","editCarData","editCarRefetch","editCarSuccess","getDataByID","enabled","putCar","putCarLoading","putCarSuccess","imagesDeleteMutate","_ref4","ids","deleteImages","EDIT_DATA","payload","_editCarData$main_ima","_editCarData$main_ima2","_editCarData$main_ima3","_editCarData$inner_im","_editCarData$inner_im2","_editCarData$inner_im3","undefined","uid","status","_editCarData$reviews","_editCarData$reviews2","_editCarData$brand","edit","color","reviews","link_1","link_2","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","addEventListener","removeItem","removeEventListener","_imagesUpload$images$","_imagesUpload$images$2","_imagesUpload$images$3","uploadImg","_imagesUpload$images$4","_imagesUpload$images$5","_imagesUpload$images$6","_imagesUpload$images$7","_imagesUpload$images$8","_imagesUpload$images$9","initialImage","_imagesUpload$images$10","_imagesUpload$images$11","_imagesUpload$images$12","_imagesUpload$images$13","_imagesUpload$images$14","_imagesUpload$images$15","optionAvailable","_filterType$countries","filterType","countries","optionsBrand","_filterCountry$brands","filterCountry","brands","_fileListPropsMain$","_fileListPropsInner$","AddTypeModal","AddCountryModal","AddBrandModal","FormTextArea","FormInputNumber","_ref5","_fileListPropsMain$2","image_ids","_ref6","_fileListPropsInner$2","_ref7","onRemove","withoutDeleteImage","_ref8","_ref9","List","fields","_ref10","add","remove","_Fragment","field","index","marginBottom","paddingLeft","_ref11","addChild","removeChild","childField","childIndex","offset","className","MinusCircleOutlined","fieldKey","block","backgroundColor","htmlType","marginTop"],"sourceRoot":""}