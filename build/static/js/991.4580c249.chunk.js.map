{"version":3,"file":"static/js/991.4580c249.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/Insurance/InsurancePostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload, Typography} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\n\nimport ImgCrop from \"antd-img-crop\";\nimport {MinusCircleOutlined} from \"@ant-design/icons\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\n\nconst {Title} = Typography\n\n\nconst initialValueForm = {\n    bg_image: [],\n    title_uz: \"\",\n    title_ru: \"\",\n    subtitle_uz: \"\",\n    subtitle_ru: \"\",\n    main_title_uz: \"\",\n    main_title_ru: \"\",\n    insurance_inners: [\n        {\n            content_title_uz: \"\",\n            content_title_ru: \"\",\n            content_text_uz: \"\",\n            content_text_ru: \"\"\n        }\n    ]\n};\n\n\nconst CarPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListPropsMain, setFileListPropsMain] = useState([]);\n\n\n    // query-image\n    const {\n        mutate: imagesUploadMutate,\n        data: imagesUpload,\n        isLoading: imagesUploadLoading,\n        isSuccess: imagesUploadSuccess,\n    } = useMutation(({url, formData}) => apiService.postData(url, formData), {\n\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n\n    // query-about\n    const {\n        mutate: postInsuranceMutate,\n        data: postInsurance,\n        isLoading: postInsuranceLoading,\n        isSuccess: postInsuranceSuccess,\n\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editInsuranceLoading,\n        data: editInsuranceData,\n        refetch: editInsuranceRefetch,\n        isSuccess: editInsuranceSuccess,\n\n    } = useQuery([\"edit-insurance\", editId], () => apiService.getDataByID(\"/about/insurance\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putInsurance, isLoading: putInsuranceLoading, data: putData, isSuccess: putInsuranceSuccess\n    } = useMutation(({\n                         url, data, id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // delete image\n\n    const {mutate: imagesDeleteMutate} = useMutation(({url, ids}) => apiService.deleteImages(url, ids), {\n        onSuccess: () => message.success('Success'), onError: (error) => message.error(error.message)\n    });\n\n    //                                              =====useEffect====\n\n    // insurance success\n    useEffect(() => {\n        if (putInsuranceSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n        if (postInsuranceSuccess || putInsuranceSuccess) {\n            navigate('/insurance')\n        }\n    }, [postInsurance, putData])\n\n    // if edit insurance\n    useEffect(() => {\n        if (editId !== \"\") {\n            editInsuranceRefetch();\n        }\n    }, [editId]);\n\n    // if no edit insurance\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit insurance\n    useEffect(() => {\n\n\n        const imageInitialMain = [{\n            uid: editInsuranceData?.bg_image?.id,\n            name: editInsuranceData?.bg_image?.id,\n            status: 'done',\n            url: editInsuranceData?.bg_image?.image,\n        }];\n\n        if (editInsuranceSuccess) {\n\n            const edit = {\n                bg_image: imageInitialMain,\n                title_uz: editInsuranceData.title_uz,\n                title_ru: editInsuranceData.title_ru,\n                subtitle_uz: editInsuranceData.subtitle_uz,\n                subtitle_ru: editInsuranceData.subtitle_ru,\n                main_title_uz: editInsuranceData.main_title_uz,\n                main_title_ru: editInsuranceData.main_title_ru,\n                insurance_inners: editInsuranceData.insurance_inners\n\n            }\n\n            setFileListPropsMain(imageInitialMain);\n            form.setFieldsValue(edit)\n        }\n\n    }, [editInsuranceData])\n    const onFinish = (values) => {\n\n\n        const data = {\n            title_uz: values.title_uz,\n            title_ru: values.title_ru,\n            subtitle_uz: values.subtitle_uz,\n            subtitle_ru: values.subtitle_ru,\n            main_title_uz: values.main_title_uz,\n            main_title_ru: values.main_title_ru,\n            bg_image: [fileListPropsMain[0]?.uid],\n            insurance_inners: values.insurance_inners\n        };\n        if (editInsuranceSuccess) {\n            putInsurance({url: \"/about/insurance\", data, id: editId});\n        } else {\n            postInsuranceMutate({url: \"/about/insurance/\", data});\n        }\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem('myFormValues', JSON.stringify(form.getFieldsValue()),);\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n\n    useEffect(() => {\n        // MAIN\n        if (imagesUploadSuccess) {\n            const uploadImg = [{\n                uid: imagesUpload?.images[0]?.id,\n                name: imagesUpload?.images[0]?.id,\n                status: \"done\",\n                url: imagesUpload?.images[0]?.url\n            }]\n\n            setFileListPropsMain(uploadImg);\n        }\n\n\n    }, [imagesUpload]);\n\n    const onChangeMainImage = ({fileList: newFileList}) => {\n\n        form.setFieldsValue({bg_image: newFileList});\n        if (fileListPropsMain.length !== 0 || newFileList.length === 0) {\n            const id = [fileListPropsMain[0]?.uid];\n            const ids = {\n                image_ids: id\n            }\n            imagesDeleteMutate({url: \"/delete-images\", ids});\n            setFileListPropsMain([])\n        }\n        const formData = new FormData();\n\n        if (newFileList.length !== 0) {\n            formData.append(\"uploaded_images\", newFileList[0].originFileObj);\n            imagesUploadMutate({url: \"/about/images/\", formData});\n        }\n    };\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n    const addFormList = (add) => {\n        let itemsValue = [];\n        add()\n        const getValue = form.getFieldsValue();\n        if (!getValue?.insurance_inners[0]) {\n            itemsValue.push({\n                content_title_uz: \"\",\n                content_title_ru: \"\",\n                content_text_uz: \"\",\n                content_text_ru:\"\"\n            })\n        }\n        form.setFieldsValue({items: itemsValue});\n    }\n\n    return (<div>\n        {(postInsuranceLoading || editInsuranceLoading || putInsuranceLoading || imagesUploadLoading) ? <AppLoader/> :\n            <Form\n                form={form}\n                name=\"basic\"\n                labelCol={{\n                    span: 24\n                }}\n                wrapperCol={{\n                    span: 24\n                }}\n                style={{\n                    maxWidth: \"100%\"\n                }}\n                initialValues={initialValueForm}\n                onFinish={onFinish}\n                onFinishFailed={onFinishFailed}\n                autoComplete=\"off\"\n            >\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Sarlavha talab qilinadi'}\n                            label={'Sarlavha Uz'}\n                            name={'title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormInput\n                            required={true}\n                            required_text={'Необходимо ввести заголовок'}\n                            label={'Заголовок Ru'}\n                            name={'title_ru'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Qo\\'shimcha sarlavha kiritish talab qilinada'}\n                            label={'Qo\\'shimcha sarlavha Uz'}\n                            name={'subtitle_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true} required_text={'Требуется дополнительный заголовок'}\n                            label={'Дополнительное название Ru'}\n                            name={'subtitle_ru'}\n                        />\n\n                    </Col>\n                </Row>\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true}\n                            required_text={'Asosiy matn sarlavha kiritish kerak'}\n                            label={'Asosiy matn Uz'}\n                            name={'main_title_uz'}\n                        />\n\n\n                    </Col>\n                    <Col span={12}>\n                        <FormTextArea\n                            required={true} required_text={'Основной текст должен быть заголовком.'}\n                            label={'Основной текст Название Ru'}\n                            name={'main_title_ru'}\n                        />\n\n                    </Col>\n                </Row>\n\n\n                <Row gutter={20}>\n\n                    <Col span={12}>\n                        <Form.Item\n                            label='Изображение основной'\n                            name={'bg_image'}\n                            rules={[{required: true, message: 'Изображение баннера должно быть загружено.'}]}>\n                            <ImgCrop>\n                                <Upload\n                                    maxCount={1}\n                                    fileList={fileListPropsMain}\n                                    listType='picture-card'\n                                    onChange={onChangeMainImage}\n                                    onPreview={onPreview}\n                                    beforeUpload={() => false}\n                                >\n                                    {fileListPropsMain.length > 0 ? \"\" : \"Upload\"}\n                                </Upload>\n                            </ImgCrop>\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Title level={3}>Добавить преимущества</Title>\n                <Form.List name=\"insurance_inners\">\n                    {(fields, {add, remove}) => (\n                        <>\n                            {fields.map((field, index) => {\n                                return (\n                                    <div key={field.fieldKey} style={{marginBottom: 20}}>\n                                        <Row gutter={20}>\n\n                                            <Col span={12}>\n                                                <FormInput\n                                                    required={true}\n                                                    required_text={'Kontent sarlavhasi talab qilinadi'}\n                                                    label={`Kontent sarlavhasi Uz ${index + 1}`}\n                                                    name={[field.name, 'content_title_uz']}\n                                                />\n                                            </Col>\n                                            <Col span={12}>\n                                                <FormInput\n                                                    required={true}\n                                                    required_text={'Необходимо ввести название контента'}\n                                                    label={`Название контента Ru ${index + 1}`}\n                                                    name={[field.name, 'content_title_ru']}\n                                                />\n                                            </Col>\n                                        </Row>\n                                        <Row gutter={20}>\n\n                                            <Col span={12}>\n                                                <FormTextArea\n                                                    required={true}\n                                                    required_text={'Kontent matn talab qilinadi'}\n                                                    label={`Kontent matn Uz ${index + 1}`}\n                                                    name={[field.name, 'content_text_uz']}\n                                                />\n                                            </Col>\n                                            <Col span={12}>\n                                                <FormTextArea\n                                                    required={true}\n                                                    required_text={'Необходимо ввести текст контента'}\n                                                    label={`Текст контента Ru ${index + 1}`}\n                                                    name={[field.name, 'content_text_ru']}\n                                                />\n                                            </Col>\n                                        </Row>\n\n\n                                        <MinusCircleOutlined\n                                            onClick={() => remove(field.name)}/>\n                                    </div>\n\n                                );\n                            })}\n                            <Form.Item>\n                                <Button type=\"primary\" onClick={() => addFormList(add)} block\n                                        style={{backgroundColor: '#28a745'}}>\n                                    Добавьте предмет\n                                </Button>\n                            </Form.Item>\n\n                        </>\n                    )}\n                </Form.List>\n\n\n                <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                    {editInsuranceSuccess ? 'Edit' : 'Add'}\n                </Button>\n            </Form>}\n    </div>);\n};\n\nexport default CarPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","TextArea","rows","Title","Typography","initialValueForm","bg_image","title_uz","title_ru","subtitle_uz","subtitle_ru","main_title_uz","main_title_ru","insurance_inners","content_title_uz","content_title_ru","content_text_uz","content_text_ru","CarPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListPropsMain","setFileListPropsMain","useState","mutate","imagesUploadMutate","data","imagesUpload","isLoading","imagesUploadLoading","isSuccess","imagesUploadSuccess","useMutation","url","formData","apiService","postData","onSuccess","success","onError","error","obj","response","concat","postInsuranceMutate","postInsurance","postInsuranceLoading","postInsuranceSuccess","_ref2","editInsuranceLoading","editInsuranceData","refetch","editInsuranceRefetch","editInsuranceSuccess","useQuery","getDataByID","enabled","putInsurance","putInsuranceLoading","putData","putInsuranceSuccess","_ref3","id","imagesDeleteMutate","_ref4","ids","deleteImages","useEffect","type","EDIT_DATA","payload","setFieldsValue","_editInsuranceData$bg","_editInsuranceData$bg2","_editInsuranceData$bg3","imageInitialMain","uid","status","image","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_imagesUpload$images$","_imagesUpload$images$2","_imagesUpload$images$3","uploadImg","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListPropsMain$","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormTextArea","ImgCrop","Upload","maxCount","fileList","listType","onChange","_ref5","newFileList","length","_fileListPropsMain$2","image_ids","FormData","append","originFileObj","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","Image","imgWindow","open","document","write","outerHTML","beforeUpload","level","List","fields","_ref6","add","remove","_Fragment","map","field","index","marginBottom","MinusCircleOutlined","onClick","fieldKey","Button","itemsValue","getValue","push","items","addFormList","block","backgroundColor","htmlType","width","marginTop"],"sourceRoot":""}