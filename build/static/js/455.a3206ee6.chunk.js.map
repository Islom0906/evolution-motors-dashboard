{"version":3,"file":"static/js/455.a3206ee6.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormInputNumber.jsx","@crema/core/Form/FormInputEmail.jsx","pages/sample/Contact/ContactPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form,  InputNumber} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInputNumber = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <InputNumber style={{width:'100%'}}/>\n        </Form.Item>\n    );\n};\n\nexport default FormInputNumber;\n\nFormInputNumber.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text}) => {\n    const validateEmail = (rule, value, callback) => {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!value || emailRegex.test(value)) {\n            callback();\n        } else {\n            callback('Please enter a valid email address');\n        }\n    };\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            },\n                { validator: validateEmail }\n            ]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect} from 'react';\nimport {Button, Col, Form,  message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormInputNumber from \"../../../@crema/core/Form/FormInputNumber\";\nimport FormInputEmail from \"../../../@crema/core/Form/FormInputEmail\";\n\nconst initialValueForm = {\n    address_uz: \"\",\n    address_ru: \"\",\n    phone_number: \"\",\n    email: \"\",\n    start_time: \"\",\n    end_time: \"\",\n    map:\"\"\n\n};\n\n\nconst ContactPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    // query-contact\n    const {\n        mutate: postContactMutate,\n        data: postContact,\n        isLoading: postContactLoading,\n        isSuccess: postContactSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editContactLoading,\n        data: editContactData,\n        refetch: editContactRefetch,\n        isSuccess: editContactSuccess,\n    } = useQuery([\"edit-contact\", editId], () => apiService.getDataByID(\"/about/contact\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putContact,\n        isLoading: putContactLoading,\n        data: putData,\n        isSuccess: putContactSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // contact success\n    useEffect(() => {\n        if (putContactSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postContactSuccess || putContactSuccess) {\n\n            navigate('/contact')\n        }\n    }, [postContact, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editContactRefetch();\n        }\n    }, [editId]);\n\n    // if no edit contact\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit contact\n    useEffect(() => {\n        if (editContactSuccess) {\n\n\n\n            const edit = {\n                address_uz: editContactData.address_uz,\n                address_ru: editContactData.address_ru,\n                phone_number: editContactData.phone_number,\n                email: editContactData.email,\n                start_time: editContactData.start_time,\n                end_time: editContactData.end_time,\n                map:editContactData.map\n            }\n            form.setFieldsValue(edit)\n        }\n\n    }, [editContactData])\n\n\n    const onFinish = (values) => {\n\n\n        if (editContactData) {\n            putContact({url: '/about/contact', data: values, id: editId})\n        } else {\n            postContactMutate({url: \"/about/contact/\", data: values});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    return (\n        <div>\n            {(postContactLoading || editContactLoading || putContactLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Address kiritish kerak'}\n                                label={'Address Uz'}\n                                name={'address_uz'}\n                            />\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Необходимо ввести адрес'}\n                                label={'Адрес Ru'}\n                                name={'address_ru'}\n                            />\n                        </Col>\n\n                    </Row>\n\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInputNumber\n                                required={true}\n                                required_text={'Вам необходимо ввести номер телефона'}\n                                label={'Номер телефона'}\n                                name={'phone_number'}\n                            />\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInputEmail\n                                required={true}\n                                required_text={'Требуется электронная почта'}\n                                label={'Электронная почта'}\n                                name={'email'}\n                            />\n                        </Col>\n\n                    </Row>\n\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Введите начало рабочего времени'}\n                                label={'Начало рабочего времени'}\n                                name={'start_time'}\n                            />\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Введите конец рабочего времени'}\n                                label={'Конец рабочего времени'}\n                                name={'end_time'}\n                            />\n                        </Col>\n                        <Col span={24}>\n                            <FormInput\n                                required={true}\n                                required_text={'Введите ссылку на геолокацию'}\n                                label={'Ссылка на геолокацию'}\n                                name={'map'}\n                            />\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editContactSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default ContactPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","_jsx","Form","Item","rules","message","children","Input","InputNumber","style","width","validator","validateEmail","rule","value","callback","test","initialValueForm","address_uz","address_ru","phone_number","email","start_time","end_time","map","ContactPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postContactMutate","data","postContact","isLoading","postContactLoading","isSuccess","postContactSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editContactLoading","editContactData","refetch","editContactRefetch","editContactSuccess","useQuery","getDataByID","enabled","putContact","putContactLoading","putData","putContactSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","_jsxs","labelCol","span","wrapperCol","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormInputNumber","FormInputEmail","Button","htmlType","marginTop"],"sourceRoot":""}