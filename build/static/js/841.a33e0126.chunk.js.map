{"version":3,"file":"static/js/841.a33e0126.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Types/TypesPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect} from 'react';\nimport {Button, Col, Form, message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n\n};\n\n\n\n\nconst TypesPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n\n    // query-types\n    const {\n        mutate: postTypesMutate,\n        data: postTypes,\n        isLoading: postTypesLoading,\n        isSuccess: postTypesSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editTypesLoading,\n        data: editTypesData,\n        refetch: editTypesRefetch,\n        isSuccess: editTypesSuccess,\n    } = useQuery([\"edit-types\", editId], () => apiService.getDataByID(\"/cars/types\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putTypes,\n        isLoading: putTypesLoading,\n        data: putData,\n        isSuccess: putTypesSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // types success\n    useEffect(() => {\n        if (putTypesSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postTypesSuccess || putTypesSuccess) {\n\n            navigate('/types')\n        }\n    }, [postTypes, putData])\n\n\n    // if edit types\n    useEffect(() => {\n        if (editId !== \"\") {\n            editTypesRefetch();\n        }\n    }, [editId]);\n\n    // if no edit types\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit types\n    useEffect(() => {\n        if (editTypesSuccess) {\n\n            const edit = {\n                title_uz: editTypesData.title_uz,\n                title_ru: editTypesData.title_ru,\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editTypesData])\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n\n\n        if (editTypesData) {\n            putTypes({url: '/cars/types', data: formData, id: editId})\n        } else {\n            postTypesMutate({url: \"/cars/types/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n\n\n\n    return (\n        <div>\n            {(postTypesLoading || editTypesLoading || putTypesLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Tur nomini kiritishingiz kerak'}\n                                label={'Tur nomi Uz'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Необходимо ввести название типа'}\n                                label={'Название типа Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editTypesSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default TypesPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","title_uz","title_ru","TypesPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postTypesMutate","data","postTypes","isLoading","postTypesLoading","isSuccess","postTypesSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editTypesLoading","editTypesData","refetch","editTypesRefetch","editTypesSuccess","useQuery","getDataByID","enabled","putTypes","putTypesLoading","putData","putTypesSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","formData","FormData","append","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","Button","htmlType","width","marginTop"],"sourceRoot":""}