{"version":3,"file":"static/js/238.c177441c.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormInputNumber.jsx","pages/sample/Region/RegionPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form,  InputNumber} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInputNumber = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <InputNumber style={{width:'100%'}}/>\n        </Form.Item>\n    );\n};\n\nexport default FormInputNumber;\n\nFormInputNumber.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect} from 'react';\nimport {Button, Col, Form, message, Row, Typography} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport {MinusCircleOutlined} from \"@ant-design/icons\";\nimport FormInputNumber from \"../../../@crema/core/Form/FormInputNumber\";\n\nconst {Title} = Typography\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    dealers: [\n        {\n            title_uz: \"\",\n            title_ru: \"\",\n            \"dealer_telegram_ids\": [\n                {\n                    \"tg_id\": null\n                }\n            ]\n        }\n    ]\n};\n\n\nconst RegionPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    // query-region\n    const {\n        mutate: postRegionMutate,\n        data: postRegion,\n        isLoading: postRegionLoading,\n        isSuccess: postRegionSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editRegionLoading,\n        data: editRegionData,\n        refetch: editRegionRefetch,\n        isSuccess: editRegionSuccess,\n    } = useQuery([\"edit-region\", editId], () => apiService.getDataByID(\"/cars/region\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putRegion,\n        isLoading: putRegionLoading,\n        data: putData,\n        isSuccess: putRegionSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // region success\n    useEffect(() => {\n        if (putRegionSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postRegionSuccess || putRegionSuccess) {\n\n            navigate('/region')\n        }\n    }, [postRegion, putData])\n\n\n    // if edit region\n    useEffect(() => {\n        if (editId !== \"\") {\n            editRegionRefetch();\n        }\n    }, [editId]);\n\n    // if no edit region\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit region\n    useEffect(() => {\n        const dealers = []\n\n        console.log(editRegionData)\n        editRegionData?.dealers.map(dealer => {\n            const data = {\n                title_uz: dealer.title_uz,\n                title_ru: dealer.title_ru,\n                dealer_telegram_ids:dealer.dealer_telegram_ids\n            }\n            dealers.push(data)\n        })\n\n        if (editRegionSuccess) {\n\n            const edit = {\n                title_uz: editRegionData.title_uz,\n                title_ru: editRegionData.title_ru,\n                dealers\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editRegionData])\n\n\n    const onFinish = (values) => {\n\n\n        console.log(values)\n        if (editRegionData) {\n            putRegion({url: '/cars/region', data: values, id: editId})\n        } else {\n            postRegionMutate({url: \"/cars/region/\", data: values});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    return (\n        <div>\n            {(postRegionLoading || editRegionLoading || putRegionLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'To\\'ldirish talab qilinadi'}\n                                label={'Viloyat nomi Uz'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Требуется заполнение'}\n                                label={'Провинция Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                    </Row>\n                    <Form.List name=\"dealers\">\n                        {(fields, {add, remove}) => (\n                            <>\n                                {fields.map((field, index) => {\n                                    return (\n                                        <div key={field.fieldKey} style={{marginBottom: 20}}>\n                                            <Row gutter={20}>\n\n                                                <Col span={11} offset={1}>\n                                                    <FormInput\n                                                        required={true}\n                                                        required_text={'To\\'ldirish talab qilinadi'}\n                                                        label={`Dealerni nomini kiriting Uz ${index + 1}`}\n                                                        name={[field.name, 'title_uz']}\n                                                    />\n                                                </Col>\n                                                <Col span={11}>\n                                                    <FormInput\n                                                        required={true}\n                                                        required_text={'Требуется заполнение'}\n                                                        label={`Введите имя дилера Ru ${index + 1}`}\n                                                        name={[field.name, 'title_ru']}\n                                                    />\n                                                </Col>\n                                            </Row>\n\n                                            <Form.List name={[field.name, \"dealer_telegram_ids\"]}\n                                                       style={{paddingLeft: '100px'}}>\n                                                {(fields, {add: addChild, remove: removeChild}) => (\n                                                    <>\n                                                        {fields.map((childField, childIndex) => {\n                                                            return (\n                                                                <div key={childField.fieldKey}\n                                                                     style={{marginBottom: 20}}>\n                                                                    <Row gutter={20}>\n\n                                                                        <Col span={20} offset={2}\n                                                                             className={'character-child'}>\n                                                                            <FormInputNumber\n                                                                                required={true}\n                                                                                required_text={'Требуется заполнение'}\n                                                                                label={`Идентификатор пользователя в Телеграмме ${childIndex + 1}`}\n                                                                                name={[childField.name, 'tg_id']}\n                                                                            />\n                                                                        </Col>\n\n                                                                        <Col span={6} offset={2}>\n\n                                                                            <Title level={3}> <MinusCircleOutlined\n                                                                                onClick={() => removeChild(childField.name)}/> Удалить\n                                                                                идентификатор пользователя в Телеграмме</Title>\n                                                                        </Col>\n                                                                    </Row>\n\n\n                                                                </div>\n\n                                                            );\n                                                        })}\n                                                        <Row>\n                                                            <Col offset={2} span={10}>\n                                                                <Form.Item>\n                                                                    <Button type=\"primary\" onClick={() => addChild()}\n                                                                            block\n                                                                            style={{backgroundColor: '#1677ff'}}>\n                                                                        Нажмите, чтобы добавить нового пользователя\n                                                                    </Button>\n                                                                </Form.Item>\n\n                                                            </Col>\n                                                        </Row>\n\n                                                    </>\n                                                )}\n                                            </Form.List>\n\n                                            <MinusCircleOutlined\n                                                onClick={() => remove(field.name)}/>\n                                        </div>\n\n                                    );\n                                })}\n                                <Form.Item>\n                                    <Button type=\"primary\" onClick={() => add()} block\n                                            style={{backgroundColor: '#28a745'}}>\n                                        Добавить нового дилера\n                                    </Button>\n                                </Form.Item>\n\n                            </>\n\n                        )}\n                    </Form.List>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editRegionSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default RegionPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","InputNumber","style","width","Title","Typography","initialValueForm","title_uz","title_ru","dealers","RegionPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","mutate","postRegionMutate","data","postRegion","isLoading","postRegionLoading","isSuccess","postRegionSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editRegionLoading","editRegionData","refetch","editRegionRefetch","editRegionSuccess","useQuery","getDataByID","enabled","putRegion","putRegionLoading","putData","putRegionSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","console","log","map","dealer","dealer_telegram_ids","push","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","List","fields","_ref3","add","remove","_Fragment","field","index","marginBottom","offset","paddingLeft","_ref4","addChild","removeChild","childField","childIndex","className","FormInputNumber","level","MinusCircleOutlined","onClick","fieldKey","Button","block","backgroundColor","htmlType","marginTop"],"sourceRoot":""}