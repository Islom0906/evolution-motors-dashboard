{"version":3,"file":"static/js/662.1d411d4f.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","@crema/core/Form/FormTextArea.jsx","pages/sample/Creadit-Leasing/CreaditLeasingPostEdit.jsx"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React from 'react';\nimport {Form } from \"antd\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport PropTypes from \"prop-types\";\n\nconst FormTextArea = ({label,name,required,required_text}) => {\n    return (\n        <Form.Item\n            label={label}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <TextArea rows={4}/>\n        </Form.Item>\n    );\n};\n\nexport default FormTextArea;\n\nFormTextArea.propTypes = {\n    label: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, message, Row, Upload} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\nimport FormTextArea from \"../../../@crema/core/Form/FormTextArea\";\nimport ImgCrop from \"antd-img-crop\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    subtitle_uz: \"\",\n    subtitle_ru: \"\",\n    main_title_uz: \"\",\n    main_title_ru: \"\",\n    main_text_uz: \"\",\n    main_text_ru: \"\",\n    bg_image:[]\n};\n\n\n\n\nconst CreaditLeasingPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n    const [fileListProps, setFileListProps] = useState([]);\n\n\n    // query-creadit\n    const {\n        mutate: postCreaditMutate,\n        data: postCreadit,\n        isLoading: postCreaditLoading,\n        isSuccess: postCreaditSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editCreaditLoading,\n        data: editCreaditData,\n        refetch: editCreaditRefetch,\n        isSuccess: editCreaditSuccess,\n    } = useQuery([\"edit-creadit\", editId], () => apiService.getDataByID(\"/about/credit-leasing\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putCreadit,\n        isLoading: putCreaditLoading,\n        data: putData,\n        isSuccess: putCreaditSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // creadit success\n    useEffect(() => {\n        if (putCreaditSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postCreaditSuccess || putCreaditSuccess) {\n\n            navigate('/creadit')\n        }\n    }, [postCreadit, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editCreaditRefetch();\n        }\n    }, [editId]);\n\n    // if no edit creadit\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n    //edit creadit\n    useEffect(() => {\n        if (editCreaditSuccess) {\n\n            const bg_image=[{\n                uid: editCreaditData.id,\n                name: editCreaditData.id,\n                status: \"done\",\n                url: editCreaditData.bg_image\n            }];\n\n\n            const edit = {\n                title_uz: editCreaditData.title_uz,\n                title_ru: editCreaditData.title_ru,\n                subtitle_uz: editCreaditData.subtitle_uz,\n                subtitle_ru: editCreaditData.subtitle_ru,\n                main_title_uz: editCreaditData.main_title_uz,\n                main_title_ru: editCreaditData.main_title_ru,\n                main_text_uz: editCreaditData.main_text_uz,\n                main_text_ru: editCreaditData.main_text_ru,\n                bg_image\n            }\n\n            setFileListProps(bg_image)\n            form.setFieldsValue(edit)\n        }\n\n    }, [editCreaditData])\n\n\n    const onFinish = (values) => {\n\n\n        const formData = new FormData();\n\n        formData.append('title_uz', values.title_uz);\n        formData.append('title_ru', values.title_ru);\n        formData.append('subtitle_uz', values.subtitle_uz);\n        formData.append('subtitle_ru', values.subtitle_ru);\n        formData.append('main_title_uz', values.main_title_uz);\n        formData.append('main_title_ru', values.main_title_ru);\n        formData.append('main_text_uz', values.main_text_uz);\n        formData.append('main_text_ru', values.main_text_ru);\n\n        if (fileListProps[0]?.originFileObj) {\n            formData.append('bg_image', fileListProps[0]?.originFileObj);\n        }\n\n        if (editCreaditData) {\n            putCreadit({url: '/about/credit-leasing', data: formData, id: editId})\n        } else {\n            postCreaditMutate({url: \"/about/credit-leasing/\", data: formData});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n    // image\n    const onChange = ({fileList: newFileList}) => {\n        setFileListProps(newFileList);\n        form.setFieldsValue({bg_image: newFileList});\n    };\n\n\n\n    const onPreview = async (file) => {\n        let src = file.url;\n        if (!src) {\n            src = await new Promise((resolve) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file.originFileObj);\n                reader.onload = () => resolve(reader.result);\n            });\n        }\n        const image = new Image();\n        image.src = src;\n        const imgWindow = window.open(src);\n        imgWindow?.document.write(image.outerHTML);\n    };\n\n\n\n    return (\n        <div>\n            {(postCreaditLoading || editCreaditLoading || putCreaditLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Sarlavha talab qilinadi'}\n                                label={'Sarlavha Uz'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Необходимо ввести заголовок'}\n                                label={'Заголовок Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n\n                    </Row>\n\n                    <Row gutter={20}>\n\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true}\n                                required_text={'Qo\\'shimcha sarlavha kiritish talab qilinada'}\n                                label={'Qo\\'shimcha sarlavha Uz'}\n                                name={'subtitle_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true} required_text={'Требуется дополнительный заголовок'}\n                                label={'Дополнительное название Ru'}\n                                name={'subtitle_ru'}\n                            />\n\n                        </Col>\n                    </Row>\n\n                    <Row gutter={20}>\n\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true}\n                                required_text={'Asosiy matn sarlavha kiritish kerak'}\n                                label={'Asosiy matn sarlavha Uz'}\n                                name={'main_title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true} required_text={'Основной текст должен быть заголовком.'}\n                                label={'Основной текст Название Ru'}\n                                name={'main_title_ru'}\n                            />\n\n                        </Col>\n                    </Row>\n\n                    <Row gutter={20}>\n\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true}\n                                required_text={'Asosiy matn kiritish kerak'}\n                                label={'Asosiy matn Uz'}\n                                name={'main_text_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormTextArea\n                                required={true} required_text={'Вам необходимо ввести основной текст'}\n                                label={'Основной текст Ru'}\n                                name={'main_text_ru'}\n                            />\n\n                        </Col>\n                    </Row>\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <Form.Item\n                                label='Изображение на заднем плане'\n                                name={'bg_image'}\n                                rules={[{required: true, message: 'Требуется фоновое изображение.'}]}>\n                                <ImgCrop rotationSlider>\n                                    <Upload\n                                        maxCount={1}\n                                        fileList={fileListProps}\n                                        listType='picture-card'\n                                        onChange={onChange}\n                                        onPreview={onPreview}\n                                        beforeUpload={() => false}\n                                    >\n                                        {fileListProps.length > 0 ? \"\" : \"Upload\"}\n                                    </Upload>\n                                </ImgCrop>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editCreaditSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default CreaditLeasingPostEdit;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","TextArea","rows","initialValueForm","title_uz","title_ru","subtitle_uz","subtitle_ru","main_title_uz","main_title_ru","main_text_uz","main_text_ru","bg_image","CreaditLeasingPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","fileListProps","setFileListProps","useState","mutate","postCreaditMutate","data","postCreadit","isLoading","postCreaditLoading","isSuccess","postCreaditSuccess","useMutation","url","apiService","postData","onSuccess","success","onError","error","obj","response","concat","editCreaditLoading","editCreaditData","refetch","editCreaditRefetch","editCreaditSuccess","useQuery","getDataByID","enabled","putCreadit","putCreaditLoading","putData","putCreaditSuccess","_ref2","id","useEffect","type","EDIT_DATA","payload","setFieldsValue","uid","status","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","_fileListProps$","formData","FormData","_fileListProps$2","append","originFileObj","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","FormInput","FormTextArea","ImgCrop","rotationSlider","Upload","maxCount","fileList","listType","onChange","_ref3","newFileList","onPreview","async","src","file","Promise","resolve","reader","FileReader","readAsDataURL","onload","result","image","Image","imgWindow","open","document","write","outerHTML","beforeUpload","length","Button","htmlType","width","marginTop"],"sourceRoot":""}