{"version":3,"file":"static/js/6.c08f5d14.chunk.js","mappings":"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","sources":["@crema/core/Form/FormInput.jsx","pages/sample/Countires/CountriesPostEdit.jsx","../node_modules/antd/es/col/index.js"],"sourcesContent":["import React from 'react';\nimport {Form, Input} from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst FormInput = ({label,name,required,required_text,warning}) => {\n    return (\n        <Form.Item\n            label={warning ? <div>\n                <p>{label}</p>\n                <br/>\n                <p>{warning}</p>\n            </div>:<div>{label}</div>}\n            name={name}\n\n            rules={[{\n                required: required, message: required_text\n            }]}\n        >\n            <Input />\n        </Form.Item>\n    );\n};\n\nexport default FormInput;\n\nFormInput.propTypes = {\n    label: PropTypes.string,\n    warning: PropTypes.string,\n    name: PropTypes.any,\n    required: PropTypes.bool,\n    required_text:PropTypes.string\n};","import React, {useEffect, useMemo} from 'react';\nimport {Button, Col, Form, message, Row, Select} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport FormInput from \"../../../@crema/core/Form/FormInput\";\n\nconst initialValueForm = {\n    title_uz: \"\",\n    title_ru: \"\",\n    type:[]\n};\n\n\n\n\n\n\nconst CountriesPostEdit = () => {\n\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId} = useSelector(state => state.editData)\n    const dispatch = useDispatch()\n\n\n\n    // query-types-get\n    const {data: typesData, refetch: typesFetch} = useQuery(\n        'get-types',\n        () => apiService.getData('/cars/types/'),\n        {\n            enabled: false,\n        },\n    );\n\n    // query-countries\n    const {\n        mutate: postCountriesMutate,\n        data: postCountries,\n        isLoading: postCountriesLoading,\n        isSuccess: postCountriesSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data), {\n        onSuccess: () => {\n\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editCountriesLoading,\n        data: editCountriesData,\n        refetch: editCountriesRefetch,\n        isSuccess: editCountriesSuccess,\n    } = useQuery([\"edit-countries\", editId], () => apiService.getDataByID(\"/cars/countries\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putCountries,\n        isLoading: putCountriesLoading,\n        data: putData,\n        isSuccess: putCountriesSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id), {\n        onSuccess: () => {\n            message.success('Success')\n        },\n        onError: (error) => {\n            for (let obj in error.response.data) {\n                message.error(`${obj}: ${error.response.data[obj][0]}`)\n            }\n        }\n    });\n\n    // countries success\n    useEffect(() => {\n        if (putCountriesSuccess) {\n            dispatch({type: EDIT_DATA, payload: \"\"})\n        }\n\n        if (postCountriesSuccess || putCountriesSuccess) {\n\n            navigate('/countries')\n        }\n    }, [postCountries, putData])\n\n\n    // if edit contact\n    useEffect(() => {\n        if (editId !== \"\") {\n            editCountriesRefetch();\n        }\n    }, [editId]);\n\n    // if no edit countries\n    useEffect(() => {\n        if (editId === \"\") {\n            form.setFieldsValue(initialValueForm)\n        }\n        typesFetch()\n    }, []);\n\n\n    //edit countries\n    useEffect(() => {\n        const type=[]\n        if (editCountriesSuccess) {\n\n            editCountriesData?.types.map(types=>{\n                type.push(types.id)\n            })\n\n            console.log(editCountriesData)\n            const edit = {\n                title_uz: editCountriesData.title_uz,\n                title_ru: editCountriesData.title_ru,\n                type\n            }\n\n            form.setFieldsValue(edit)\n        }\n\n    }, [editCountriesData])\n\n\n    const onFinish = (values) => {\n\n\n\n\n        if (editCountriesData) {\n            putCountries({url: '/cars/countries', data: values, id: editId})\n        } else {\n            postCountriesMutate({url: \"/cars/countries/\", data: values});\n        }\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n    useEffect(() => {\n        const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n        if (storedValues) {\n            storedValues.images = []\n            form.setFieldsValue(storedValues);\n        }\n\n        const handleBeforeUnload = () => {\n\n            localStorage.setItem(\n                'myFormValues',\n                JSON.stringify(form.getFieldsValue()),\n            );\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            localStorage.removeItem('editDataId')\n            localStorage.removeItem('myFormValues')\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        }\n    }, []);\n\n\n\n    // option types\n    const optionsTypes = useMemo(() => {\n        return typesData?.map((option) => {\n            return {\n                value: option?.id,\n                label: option?.title_ru,\n            };\n        });\n    }, [typesData]);\n\n    return (\n        <div>\n            {(postCountriesLoading || editCountriesLoading || putCountriesLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Mamlakat nomini kiritishingiz kerak'}\n                                label={'Mamlakat nomi Uz'}\n                                name={'title_uz'}\n                            />\n\n\n                        </Col>\n                        <Col span={12}>\n                            <FormInput\n                                required={true}\n                                required_text={'Необходимо ввести название страна'}\n                                label={'Название страна Ru'}\n                                name={'title_ru'}\n                            />\n\n                        </Col>\n                        <Col span={24}>\n                            <Form.Item\n                                label={'Выберите типы'}\n                                name={'type'}\n                                rules={[{\n                                    required: true, message: 'Типы должны быть выбраны'\n                                }]}\n                                wrapperCol={{\n                                    span: 24,\n                                }}\n                            >\n                                <Select\n                                    mode={'multiple'}\n                                    style={{\n                                        width: '100%',\n                                    }}\n                                    placeholder='Выберите одну типы'\n                                    optionLabelProp='label'\n                                    options={optionsTypes}\n                                />\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n\n                    <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\", marginTop: \"20px\"}}>\n                        {\n                            editCountriesSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default CountriesPostEdit;","import { Col } from '../grid';\nexport default Col;"],"names":["_ref","label","name","required","required_text","warning","_jsx","Form","Item","_jsxs","children","rules","message","Input","initialValueForm","title_uz","title_ru","type","CountriesPostEdit","form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","data","typesData","refetch","typesFetch","useQuery","apiService","getData","enabled","mutate","postCountriesMutate","postCountries","isLoading","postCountriesLoading","isSuccess","postCountriesSuccess","useMutation","url","postData","onSuccess","success","onError","error","obj","response","concat","editCountriesLoading","editCountriesData","editCountriesRefetch","editCountriesSuccess","getDataByID","putCountries","putCountriesLoading","putData","putCountriesSuccess","_ref2","id","useEffect","EDIT_DATA","payload","setFieldsValue","types","map","push","console","log","edit","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","optionsTypes","useMemo","option","value","AppLoader","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","onFinishFailed","errorInfo","autoComplete","Row","gutter","Col","FormInput","Select","mode","width","placeholder","optionLabelProp","options","Button","htmlType","marginTop"],"sourceRoot":""}