{"version":3,"file":"static/js/325.f584e40c.chunk.js","mappings":"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","sources":["pages/sample/Map/MapPostEdit.jsx"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {Button, Col, Form, Input, message, Row} from \"antd\";\nimport {useMutation, useQuery} from \"react-query\";\nimport apiService from \"../../../@crema/services/apis/api\";\nimport {AppLoader} from \"../../../@crema\";\nimport {useNavigate} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {EDIT_DATA} from \"../../../shared/constants/ActionTypes\";\nimport {GoogleMap, MarkerF, useJsApiLoader} from \"@react-google-maps/api\";\n\nconst initialValueForm = {\n    name:\"\",\n    lat:\"\"\n};\n\n\n\nconst MapPostEdit = () => {\n    const { isLoaded } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: 'AIzaSyDt2upRTGqJ3BOGeKN1aCG5dByeOspcREk',\n        libraries: ['geometry', 'drawing'],\n    });\n    const [form] = Form.useForm();\n    const navigate = useNavigate()\n    const {editId}=useSelector(state => state.editData)\n    const dispatch=useDispatch()\n\n\n\n    const [latLng, setlatLng] = useState({lat:null,lng:null});\n    const [defaultCenter, setDefaultCenter] = useState({lat: 41.311785,\n        lng: 69.279696,});\n    // query-map\n    const {\n        mutate: postMapMutate,\n        data: postMap,\n        isLoading: postMapLoading,\n        isSuccess: postMapSuccess,\n    } = useMutation(({url, data}) => apiService.postData(url, data),{\n        onSuccess:()=>{\n\n            message.success('Success')\n        },\n        onError:(error)=>{\n\n            message.error(error)\n        }\n    });\n\n    // query-edit\n    const {\n        isLoading: editMapLoading,\n        data: editMapData,\n        refetch: editMapRefetch,\n        isSuccess: editMapSuccess,\n    } = useQuery([\"edit-map\", editId], () => apiService.getDataByID(\"/about/map\", editId), {\n        enabled: false\n    });\n    // put-query\n    const {\n        mutate: putMap,\n        isLoading: putMapLoading,\n        data: putData,\n        isSuccess: putMapSuccess\n    } = useMutation(({\n                         url,\n                         data,\n                         id\n                     }) => apiService.editData(url, data, id),{\n        onSuccess:()=>{\n            message.success('Success')\n        },\n        onError:(error)=>{\n            message.error(error.message)\n        }\n    });\n\n    // map success\n    useEffect(() => {\n        if (putMapSuccess) {\n            dispatch({type:EDIT_DATA,payload:\"\"})\n        }\n\n        if (postMapSuccess || putMapSuccess) {\n\n            navigate('/map')\n        }\n    }, [postMap,putData])\n\n\n\n\n\n    // if edit map\n    useEffect(() => {\n        if (editId !== \"\") {\n            editMapRefetch();\n        }\n    }, [editId]);\n\n    // if no edit map\n    useEffect(() => {\n        if (editId===\"\"){\n            form.setFieldsValue(initialValueForm)\n        }\n    }, []);\n\n\n\n\n    //edit map\n    useEffect(()=>{\n        if (editMapSuccess){\n\n        const edit={\n            name:editMapData.name,\n            lat:editMapData.lat\n        }\n        setlatLng({lat:Number(editMapData.lat),lng:Number(editMapData.lng)})\n            form.setFieldsValue(edit)\n        }\n\n    },[editMapData])\n\n\n\n    const onFinish = (values) => {\n        const formData=new FormData()\n\n        formData.append('name',values.name)\n        formData.append('lat',latLng.lat)\n        formData.append('lng',latLng.lng)\n\n\n        if (editMapData){\n            putMap({url: '/about/map',data:formData,id:editId})\n        }else{\n            postMapMutate({url: \"/about/map/\", data:formData});\n        }\n\n\n\n\n\n\n    }\n    const onFinishFailed = (errorInfo) => {\n        console.log(\"Failed:\", errorInfo);\n    };\n\n\n    // refresh page again get data\n\n  useEffect(() => {\n    const storedValues = JSON.parse(localStorage.getItem('myFormValues'));\n    if (storedValues) {\n        storedValues.images=[]\n      form.setFieldsValue(storedValues);\n    }\n\n    const handleBeforeUnload = () => {\n        \n            localStorage.setItem(\n              'myFormValues',\n              JSON.stringify(form.getFieldsValue()),\n            );\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return ()=>{\n        localStorage.removeItem('editDataId')\n        localStorage.removeItem('myFormValues')\n        window.removeEventListener('beforeunload', handleBeforeUnload);\n    }\n  }, []);\n\n\n    // Map\n    const handleMapClick = (event) => {\n        const clickedLatLng = {\n            lat: event.latLng.lat(),\n            lng: event?.latLng.lng(),\n        };\n        setDefaultCenter(clickedLatLng)\n        setlatLng(clickedLatLng)\n        form.setFieldsValue({lat:clickedLatLng.lat})\n    };\n    const mapStyles = {\n        height: '400px',\n        width: '100%',\n    };\n\n\n    return (\n        <div>\n            {( postMapLoading ||editMapLoading ||putMapLoading) ?\n                <AppLoader/> :\n                <Form\n                    form={form}\n                    name=\"basic\"\n                    labelCol={{\n                        span: 24\n                    }}\n                    wrapperCol={{\n                        span: 24\n                    }}\n                    style={{\n                        maxWidth: \"100%\"\n                    }}\n                    initialValues={initialValueForm}\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                    autoComplete=\"off\"\n                >\n                    <Row gutter={20}>\n                        <Col span={24}>\n                            <Form.Item\n                                label=\"Название\"\n                                name=\"name\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Ввод названия обязателен\"\n                                    }\n                                ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n\n                        </Col>\n                    </Row>\n\n\n\n\n                    <Row gutter={20}>\n                        <Col span={24}>\n                            {\n                                isLoaded &&\n\n                                <GoogleMap\n                                    mapContainerStyle={mapStyles}\n                                    zoom={12}\n                                    center={defaultCenter}\n                                    onClick={handleMapClick}\n                                >\n                                    <MarkerF position={latLng}/>\n                                </GoogleMap>\n                            }\n                            <Form.Item\n                                label=\"\"\n                                name=\"lat\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: \"Разметка карты обязательна\"\n                                    }\n                                ]}\n                            >\n\n\n\n                            </Form.Item>\n\n\n                        </Col>\n\n                    </Row>\n\n\n                        <Button type=\"primary\" htmlType=\"submit\" style={{width: \"100%\",marginTop:\"20px\"}}>\n                    {\n                            editMapSuccess ? 'Edit' : 'Add'\n                        }\n                    </Button>\n                </Form>\n            }\n        </div>\n    );\n};\n\nexport default MapPostEdit;"],"names":["initialValueForm","name","lat","MapPostEdit","isLoaded","useJsApiLoader","id","googleMapsApiKey","libraries","form","Form","useForm","navigate","useNavigate","editId","useSelector","state","editData","dispatch","useDispatch","latLng","setlatLng","useState","lng","defaultCenter","setDefaultCenter","mutate","postMapMutate","data","postMap","isLoading","postMapLoading","isSuccess","postMapSuccess","useMutation","_ref","url","apiService","postData","onSuccess","message","success","onError","error","editMapLoading","editMapData","refetch","editMapRefetch","editMapSuccess","useQuery","getDataByID","enabled","putMap","putMapLoading","putData","putMapSuccess","_ref2","useEffect","type","EDIT_DATA","payload","setFieldsValue","edit","Number","storedValues","JSON","parse","localStorage","getItem","images","handleBeforeUnload","setItem","stringify","getFieldsValue","window","addEventListener","removeItem","removeEventListener","_jsx","children","AppLoader","_jsxs","labelCol","span","wrapperCol","style","maxWidth","initialValues","onFinish","values","formData","FormData","append","onFinishFailed","errorInfo","console","log","autoComplete","Row","gutter","Col","Item","label","rules","required","Input","GoogleMap","mapContainerStyle","height","width","zoom","center","onClick","event","clickedLatLng","MarkerF","position","Button","htmlType","marginTop"],"sourceRoot":""}